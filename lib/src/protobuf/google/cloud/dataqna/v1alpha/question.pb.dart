//
//  Generated code. Do not modify.
//  source: google/cloud/dataqna/v1alpha/question.proto
//
// @dart = 2.12

// ignore_for_file: annotate_overrides, camel_case_types, comment_references
// ignore_for_file: constant_identifier_names, library_prefixes
// ignore_for_file: non_constant_identifier_names, prefer_final_fields
// ignore_for_file: unnecessary_import, unnecessary_this, unused_import

import 'dart:core' as $core;

import 'package:fixnum/fixnum.dart' as $fixnum;
import 'package:protobuf/protobuf.dart' as $pb;

import '../../../protobuf/any.pb.dart' as $1794;
import '../../../protobuf/timestamp.pb.dart' as $1775;
import '../../../rpc/status.pb.dart' as $1795;
import 'annotated_string.pb.dart' as $4471;
import 'question.pbenum.dart';

export 'question.pbenum.dart';

/// The question resource represents a natural language query, its settings,
/// understanding generated by the system, and answer retrieval status.
/// A question cannot be modified.
class Question extends $pb.GeneratedMessage {
  factory Question({
    $core.String? name,
    $core.Iterable<$core.String>? scopes,
    $core.String? query,
    $core.Iterable<$core.String>? dataSourceAnnotations,
    InterpretError? interpretError,
    $core.Iterable<Interpretation>? interpretations,
    $1775.Timestamp? createTime,
    $core.String? userEmail,
    DebugFlags? debugFlags,
    $1794.Any? debugInfo,
  }) {
    final $result = create();
    if (name != null) {
      $result.name = name;
    }
    if (scopes != null) {
      $result.scopes.addAll(scopes);
    }
    if (query != null) {
      $result.query = query;
    }
    if (dataSourceAnnotations != null) {
      $result.dataSourceAnnotations.addAll(dataSourceAnnotations);
    }
    if (interpretError != null) {
      $result.interpretError = interpretError;
    }
    if (interpretations != null) {
      $result.interpretations.addAll(interpretations);
    }
    if (createTime != null) {
      $result.createTime = createTime;
    }
    if (userEmail != null) {
      $result.userEmail = userEmail;
    }
    if (debugFlags != null) {
      $result.debugFlags = debugFlags;
    }
    if (debugInfo != null) {
      $result.debugInfo = debugInfo;
    }
    return $result;
  }
  Question._() : super();
  factory Question.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory Question.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'Question', package: const $pb.PackageName(_omitMessageNames ? '' : 'google.cloud.dataqna.v1alpha'), createEmptyInstance: create)
    ..aOS(1, _omitFieldNames ? '' : 'name')
    ..pPS(2, _omitFieldNames ? '' : 'scopes')
    ..aOS(3, _omitFieldNames ? '' : 'query')
    ..pPS(4, _omitFieldNames ? '' : 'dataSourceAnnotations')
    ..aOM<InterpretError>(5, _omitFieldNames ? '' : 'interpretError', subBuilder: InterpretError.create)
    ..pc<Interpretation>(6, _omitFieldNames ? '' : 'interpretations', $pb.PbFieldType.PM, subBuilder: Interpretation.create)
    ..aOM<$1775.Timestamp>(7, _omitFieldNames ? '' : 'createTime', subBuilder: $1775.Timestamp.create)
    ..aOS(8, _omitFieldNames ? '' : 'userEmail')
    ..aOM<DebugFlags>(9, _omitFieldNames ? '' : 'debugFlags', subBuilder: DebugFlags.create)
    ..aOM<$1794.Any>(10, _omitFieldNames ? '' : 'debugInfo', subBuilder: $1794.Any.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  Question clone() => Question()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  Question copyWith(void Function(Question) updates) => super.copyWith((message) => updates(message as Question)) as Question;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static Question create() => Question._();
  Question createEmptyInstance() => create();
  static $pb.PbList<Question> createRepeated() => $pb.PbList<Question>();
  @$core.pragma('dart2js:noInline')
  static Question getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<Question>(create);
  static Question? _defaultInstance;

  /// Output only. Immutable. The unique identifier for the Question. The ID is server-generated.
  /// Example: `projects/foo/locations/bar/questions/123`
  @$pb.TagNumber(1)
  $core.String get name => $_getSZ(0);
  @$pb.TagNumber(1)
  set name($core.String v) { $_setString(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasName() => $_has(0);
  @$pb.TagNumber(1)
  void clearName() => clearField(1);

  ///  Required. Immutable. Scopes to be used for the question. A scope defines the relevant data set
  ///  scope. It can be a reference to a specific data source or a collection of
  ///  data sources. Currently, support is limited to a single BigQuery table.
  ///  There must be exactly one `scopes` element.
  ///
  ///  Example:
  ///  `//bigquery.googleapis.com/projects/test-project/datasets/foo/tables/bar`
  @$pb.TagNumber(2)
  $core.List<$core.String> get scopes => $_getList(1);

  /// Required. Immutable. The query in natural language.
  @$pb.TagNumber(3)
  $core.String get query => $_getSZ(2);
  @$pb.TagNumber(3)
  set query($core.String v) { $_setString(2, v); }
  @$pb.TagNumber(3)
  $core.bool hasQuery() => $_has(2);
  @$pb.TagNumber(3)
  void clearQuery() => clearField(3);

  /// A list of annotations to use instead of the default annotation of a data
  /// source (set in the data source reference resource). There must not be
  /// more than one annotation with the same data source reference.
  @$pb.TagNumber(4)
  $core.List<$core.String> get dataSourceAnnotations => $_getList(3);

  ///  An error field explaining why interpretation failed. This is only populated
  ///  if the interpretation failed.
  ///
  ///  Note: This is different from getting a status error on the request itself.
  ///  This is not a client or server error and the Question resource is still
  ///  persisted, but the service could not interpret the question. Clients should
  ///  present the error to the user so the user can rephrase the question.
  @$pb.TagNumber(5)
  InterpretError get interpretError => $_getN(4);
  @$pb.TagNumber(5)
  set interpretError(InterpretError v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasInterpretError() => $_has(4);
  @$pb.TagNumber(5)
  void clearInterpretError() => clearField(5);
  @$pb.TagNumber(5)
  InterpretError ensureInterpretError() => $_ensure(4);

  /// A list of interpretations for this question.
  @$pb.TagNumber(6)
  $core.List<Interpretation> get interpretations => $_getList(5);

  /// Time when the question was created.
  @$pb.TagNumber(7)
  $1775.Timestamp get createTime => $_getN(6);
  @$pb.TagNumber(7)
  set createTime($1775.Timestamp v) { setField(7, v); }
  @$pb.TagNumber(7)
  $core.bool hasCreateTime() => $_has(6);
  @$pb.TagNumber(7)
  void clearCreateTime() => clearField(7);
  @$pb.TagNumber(7)
  $1775.Timestamp ensureCreateTime() => $_ensure(6);

  /// Output only. The e-mail address of the user that created this question.
  @$pb.TagNumber(8)
  $core.String get userEmail => $_getSZ(7);
  @$pb.TagNumber(8)
  set userEmail($core.String v) { $_setString(7, v); }
  @$pb.TagNumber(8)
  $core.bool hasUserEmail() => $_has(7);
  @$pb.TagNumber(8)
  void clearUserEmail() => clearField(8);

  /// Input only. Immutable. Flags to request additional information for debugging purposes.
  @$pb.TagNumber(9)
  DebugFlags get debugFlags => $_getN(8);
  @$pb.TagNumber(9)
  set debugFlags(DebugFlags v) { setField(9, v); }
  @$pb.TagNumber(9)
  $core.bool hasDebugFlags() => $_has(8);
  @$pb.TagNumber(9)
  void clearDebugFlags() => clearField(9);
  @$pb.TagNumber(9)
  DebugFlags ensureDebugFlags() => $_ensure(8);

  /// Top level debug information.
  /// This will be stored as the type DebugInformation.
  /// Using Any so clients don't need to pull in anything
  /// inside the debug message.
  @$pb.TagNumber(10)
  $1794.Any get debugInfo => $_getN(9);
  @$pb.TagNumber(10)
  set debugInfo($1794.Any v) { setField(10, v); }
  @$pb.TagNumber(10)
  $core.bool hasDebugInfo() => $_has(9);
  @$pb.TagNumber(10)
  void clearDebugInfo() => clearField(10);
  @$pb.TagNumber(10)
  $1794.Any ensureDebugInfo() => $_ensure(9);
}

/// Details on interpretation failure.
class InterpretError_InterpretErrorDetails extends $pb.GeneratedMessage {
  factory InterpretError_InterpretErrorDetails({
    InterpretError_InterpretUnsupportedDetails? unsupportedDetails,
    InterpretError_InterpretIncompleteQueryDetails? incompleteQueryDetails,
    InterpretError_InterpretAmbiguityDetails? ambiguityDetails,
  }) {
    final $result = create();
    if (unsupportedDetails != null) {
      $result.unsupportedDetails = unsupportedDetails;
    }
    if (incompleteQueryDetails != null) {
      $result.incompleteQueryDetails = incompleteQueryDetails;
    }
    if (ambiguityDetails != null) {
      $result.ambiguityDetails = ambiguityDetails;
    }
    return $result;
  }
  InterpretError_InterpretErrorDetails._() : super();
  factory InterpretError_InterpretErrorDetails.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory InterpretError_InterpretErrorDetails.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'InterpretError.InterpretErrorDetails', package: const $pb.PackageName(_omitMessageNames ? '' : 'google.cloud.dataqna.v1alpha'), createEmptyInstance: create)
    ..aOM<InterpretError_InterpretUnsupportedDetails>(1, _omitFieldNames ? '' : 'unsupportedDetails', subBuilder: InterpretError_InterpretUnsupportedDetails.create)
    ..aOM<InterpretError_InterpretIncompleteQueryDetails>(2, _omitFieldNames ? '' : 'incompleteQueryDetails', subBuilder: InterpretError_InterpretIncompleteQueryDetails.create)
    ..aOM<InterpretError_InterpretAmbiguityDetails>(3, _omitFieldNames ? '' : 'ambiguityDetails', subBuilder: InterpretError_InterpretAmbiguityDetails.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  InterpretError_InterpretErrorDetails clone() => InterpretError_InterpretErrorDetails()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  InterpretError_InterpretErrorDetails copyWith(void Function(InterpretError_InterpretErrorDetails) updates) => super.copyWith((message) => updates(message as InterpretError_InterpretErrorDetails)) as InterpretError_InterpretErrorDetails;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static InterpretError_InterpretErrorDetails create() => InterpretError_InterpretErrorDetails._();
  InterpretError_InterpretErrorDetails createEmptyInstance() => create();
  static $pb.PbList<InterpretError_InterpretErrorDetails> createRepeated() => $pb.PbList<InterpretError_InterpretErrorDetails>();
  @$core.pragma('dart2js:noInline')
  static InterpretError_InterpretErrorDetails getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<InterpretError_InterpretErrorDetails>(create);
  static InterpretError_InterpretErrorDetails? _defaultInstance;

  /// Populated if parts of the query are unsupported.
  @$pb.TagNumber(1)
  InterpretError_InterpretUnsupportedDetails get unsupportedDetails => $_getN(0);
  @$pb.TagNumber(1)
  set unsupportedDetails(InterpretError_InterpretUnsupportedDetails v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasUnsupportedDetails() => $_has(0);
  @$pb.TagNumber(1)
  void clearUnsupportedDetails() => clearField(1);
  @$pb.TagNumber(1)
  InterpretError_InterpretUnsupportedDetails ensureUnsupportedDetails() => $_ensure(0);

  /// Populated if the query is incomplete.
  @$pb.TagNumber(2)
  InterpretError_InterpretIncompleteQueryDetails get incompleteQueryDetails => $_getN(1);
  @$pb.TagNumber(2)
  set incompleteQueryDetails(InterpretError_InterpretIncompleteQueryDetails v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasIncompleteQueryDetails() => $_has(1);
  @$pb.TagNumber(2)
  void clearIncompleteQueryDetails() => clearField(2);
  @$pb.TagNumber(2)
  InterpretError_InterpretIncompleteQueryDetails ensureIncompleteQueryDetails() => $_ensure(1);

  /// Populated if the query was too ambiguous.
  @$pb.TagNumber(3)
  InterpretError_InterpretAmbiguityDetails get ambiguityDetails => $_getN(2);
  @$pb.TagNumber(3)
  set ambiguityDetails(InterpretError_InterpretAmbiguityDetails v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasAmbiguityDetails() => $_has(2);
  @$pb.TagNumber(3)
  void clearAmbiguityDetails() => clearField(3);
  @$pb.TagNumber(3)
  InterpretError_InterpretAmbiguityDetails ensureAmbiguityDetails() => $_ensure(2);
}

/// Details about unsupported parts in a query.
class InterpretError_InterpretUnsupportedDetails extends $pb.GeneratedMessage {
  factory InterpretError_InterpretUnsupportedDetails({
    $core.Iterable<$core.String>? operators,
    $core.Iterable<$core.String>? intent,
  }) {
    final $result = create();
    if (operators != null) {
      $result.operators.addAll(operators);
    }
    if (intent != null) {
      $result.intent.addAll(intent);
    }
    return $result;
  }
  InterpretError_InterpretUnsupportedDetails._() : super();
  factory InterpretError_InterpretUnsupportedDetails.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory InterpretError_InterpretUnsupportedDetails.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'InterpretError.InterpretUnsupportedDetails', package: const $pb.PackageName(_omitMessageNames ? '' : 'google.cloud.dataqna.v1alpha'), createEmptyInstance: create)
    ..pPS(1, _omitFieldNames ? '' : 'operators')
    ..pPS(2, _omitFieldNames ? '' : 'intent')
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  InterpretError_InterpretUnsupportedDetails clone() => InterpretError_InterpretUnsupportedDetails()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  InterpretError_InterpretUnsupportedDetails copyWith(void Function(InterpretError_InterpretUnsupportedDetails) updates) => super.copyWith((message) => updates(message as InterpretError_InterpretUnsupportedDetails)) as InterpretError_InterpretUnsupportedDetails;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static InterpretError_InterpretUnsupportedDetails create() => InterpretError_InterpretUnsupportedDetails._();
  InterpretError_InterpretUnsupportedDetails createEmptyInstance() => create();
  static $pb.PbList<InterpretError_InterpretUnsupportedDetails> createRepeated() => $pb.PbList<InterpretError_InterpretUnsupportedDetails>();
  @$core.pragma('dart2js:noInline')
  static InterpretError_InterpretUnsupportedDetails getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<InterpretError_InterpretUnsupportedDetails>(create);
  static InterpretError_InterpretUnsupportedDetails? _defaultInstance;

  /// Unsupported operators. For example: median.
  @$pb.TagNumber(1)
  $core.List<$core.String> get operators => $_getList(0);

  /// Unsupported intents.
  @$pb.TagNumber(2)
  $core.List<$core.String> get intent => $_getList(1);
}

/// Details about an incomplete query.
class InterpretError_InterpretIncompleteQueryDetails extends $pb.GeneratedMessage {
  factory InterpretError_InterpretIncompleteQueryDetails({
    $core.Iterable<InterpretEntity>? entities,
  }) {
    final $result = create();
    if (entities != null) {
      $result.entities.addAll(entities);
    }
    return $result;
  }
  InterpretError_InterpretIncompleteQueryDetails._() : super();
  factory InterpretError_InterpretIncompleteQueryDetails.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory InterpretError_InterpretIncompleteQueryDetails.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'InterpretError.InterpretIncompleteQueryDetails', package: const $pb.PackageName(_omitMessageNames ? '' : 'google.cloud.dataqna.v1alpha'), createEmptyInstance: create)
    ..pc<InterpretEntity>(1, _omitFieldNames ? '' : 'entities', $pb.PbFieldType.KE, valueOf: InterpretEntity.valueOf, enumValues: InterpretEntity.values, defaultEnumValue: InterpretEntity.INTERPRET_ENTITY_UNSPECIFIED)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  InterpretError_InterpretIncompleteQueryDetails clone() => InterpretError_InterpretIncompleteQueryDetails()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  InterpretError_InterpretIncompleteQueryDetails copyWith(void Function(InterpretError_InterpretIncompleteQueryDetails) updates) => super.copyWith((message) => updates(message as InterpretError_InterpretIncompleteQueryDetails)) as InterpretError_InterpretIncompleteQueryDetails;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static InterpretError_InterpretIncompleteQueryDetails create() => InterpretError_InterpretIncompleteQueryDetails._();
  InterpretError_InterpretIncompleteQueryDetails createEmptyInstance() => create();
  static $pb.PbList<InterpretError_InterpretIncompleteQueryDetails> createRepeated() => $pb.PbList<InterpretError_InterpretIncompleteQueryDetails>();
  @$core.pragma('dart2js:noInline')
  static InterpretError_InterpretIncompleteQueryDetails getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<InterpretError_InterpretIncompleteQueryDetails>(create);
  static InterpretError_InterpretIncompleteQueryDetails? _defaultInstance;

  /// List of missing interpret entities.
  @$pb.TagNumber(1)
  $core.List<InterpretEntity> get entities => $_getList(0);
}

/// Details about a query that was too ambiguous. Currently, the message
/// has no fields and its presence signals that there was ambiguity.
class InterpretError_InterpretAmbiguityDetails extends $pb.GeneratedMessage {
  factory InterpretError_InterpretAmbiguityDetails() => create();
  InterpretError_InterpretAmbiguityDetails._() : super();
  factory InterpretError_InterpretAmbiguityDetails.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory InterpretError_InterpretAmbiguityDetails.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'InterpretError.InterpretAmbiguityDetails', package: const $pb.PackageName(_omitMessageNames ? '' : 'google.cloud.dataqna.v1alpha'), createEmptyInstance: create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  InterpretError_InterpretAmbiguityDetails clone() => InterpretError_InterpretAmbiguityDetails()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  InterpretError_InterpretAmbiguityDetails copyWith(void Function(InterpretError_InterpretAmbiguityDetails) updates) => super.copyWith((message) => updates(message as InterpretError_InterpretAmbiguityDetails)) as InterpretError_InterpretAmbiguityDetails;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static InterpretError_InterpretAmbiguityDetails create() => InterpretError_InterpretAmbiguityDetails._();
  InterpretError_InterpretAmbiguityDetails createEmptyInstance() => create();
  static $pb.PbList<InterpretError_InterpretAmbiguityDetails> createRepeated() => $pb.PbList<InterpretError_InterpretAmbiguityDetails>();
  @$core.pragma('dart2js:noInline')
  static InterpretError_InterpretAmbiguityDetails getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<InterpretError_InterpretAmbiguityDetails>(create);
  static InterpretError_InterpretAmbiguityDetails? _defaultInstance;
}

/// Details on the failure to interpret the question.
class InterpretError extends $pb.GeneratedMessage {
  factory InterpretError({
    $core.String? message,
    InterpretError_InterpretErrorCode? code,
    InterpretError_InterpretErrorDetails? details,
  }) {
    final $result = create();
    if (message != null) {
      $result.message = message;
    }
    if (code != null) {
      $result.code = code;
    }
    if (details != null) {
      $result.details = details;
    }
    return $result;
  }
  InterpretError._() : super();
  factory InterpretError.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory InterpretError.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'InterpretError', package: const $pb.PackageName(_omitMessageNames ? '' : 'google.cloud.dataqna.v1alpha'), createEmptyInstance: create)
    ..aOS(1, _omitFieldNames ? '' : 'message')
    ..e<InterpretError_InterpretErrorCode>(2, _omitFieldNames ? '' : 'code', $pb.PbFieldType.OE, defaultOrMaker: InterpretError_InterpretErrorCode.INTERPRET_ERROR_CODE_UNSPECIFIED, valueOf: InterpretError_InterpretErrorCode.valueOf, enumValues: InterpretError_InterpretErrorCode.values)
    ..aOM<InterpretError_InterpretErrorDetails>(3, _omitFieldNames ? '' : 'details', subBuilder: InterpretError_InterpretErrorDetails.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  InterpretError clone() => InterpretError()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  InterpretError copyWith(void Function(InterpretError) updates) => super.copyWith((message) => updates(message as InterpretError)) as InterpretError;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static InterpretError create() => InterpretError._();
  InterpretError createEmptyInstance() => create();
  static $pb.PbList<InterpretError> createRepeated() => $pb.PbList<InterpretError>();
  @$core.pragma('dart2js:noInline')
  static InterpretError getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<InterpretError>(create);
  static InterpretError? _defaultInstance;

  /// Error message explaining why this question could not be interpreted.
  @$pb.TagNumber(1)
  $core.String get message => $_getSZ(0);
  @$pb.TagNumber(1)
  set message($core.String v) { $_setString(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasMessage() => $_has(0);
  @$pb.TagNumber(1)
  void clearMessage() => clearField(1);

  /// The code for the error category why the interpretation failed.
  @$pb.TagNumber(2)
  InterpretError_InterpretErrorCode get code => $_getN(1);
  @$pb.TagNumber(2)
  set code(InterpretError_InterpretErrorCode v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasCode() => $_has(1);
  @$pb.TagNumber(2)
  void clearCode() => clearField(2);

  /// Details on interpretation failure.
  @$pb.TagNumber(3)
  InterpretError_InterpretErrorDetails get details => $_getN(2);
  @$pb.TagNumber(3)
  set details(InterpretError_InterpretErrorDetails v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasDetails() => $_has(2);
  @$pb.TagNumber(3)
  void clearDetails() => clearField(3);
  @$pb.TagNumber(3)
  InterpretError_InterpretErrorDetails ensureDetails() => $_ensure(2);
}

/// Information about the backend status (such as BigQuery) of the execution.
class ExecutionInfo extends $pb.GeneratedMessage {
  factory ExecutionInfo({
    $1795.Status? jobCreationStatus,
    ExecutionInfo_JobExecutionState? jobExecutionState,
    $1775.Timestamp? createTime,
    BigQueryJob? bigqueryJob,
  }) {
    final $result = create();
    if (jobCreationStatus != null) {
      $result.jobCreationStatus = jobCreationStatus;
    }
    if (jobExecutionState != null) {
      $result.jobExecutionState = jobExecutionState;
    }
    if (createTime != null) {
      $result.createTime = createTime;
    }
    if (bigqueryJob != null) {
      $result.bigqueryJob = bigqueryJob;
    }
    return $result;
  }
  ExecutionInfo._() : super();
  factory ExecutionInfo.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ExecutionInfo.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ExecutionInfo', package: const $pb.PackageName(_omitMessageNames ? '' : 'google.cloud.dataqna.v1alpha'), createEmptyInstance: create)
    ..aOM<$1795.Status>(1, _omitFieldNames ? '' : 'jobCreationStatus', subBuilder: $1795.Status.create)
    ..e<ExecutionInfo_JobExecutionState>(2, _omitFieldNames ? '' : 'jobExecutionState', $pb.PbFieldType.OE, defaultOrMaker: ExecutionInfo_JobExecutionState.JOB_EXECUTION_STATE_UNSPECIFIED, valueOf: ExecutionInfo_JobExecutionState.valueOf, enumValues: ExecutionInfo_JobExecutionState.values)
    ..aOM<$1775.Timestamp>(3, _omitFieldNames ? '' : 'createTime', subBuilder: $1775.Timestamp.create)
    ..aOM<BigQueryJob>(4, _omitFieldNames ? '' : 'bigqueryJob', subBuilder: BigQueryJob.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ExecutionInfo clone() => ExecutionInfo()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ExecutionInfo copyWith(void Function(ExecutionInfo) updates) => super.copyWith((message) => updates(message as ExecutionInfo)) as ExecutionInfo;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ExecutionInfo create() => ExecutionInfo._();
  ExecutionInfo createEmptyInstance() => create();
  static $pb.PbList<ExecutionInfo> createRepeated() => $pb.PbList<ExecutionInfo>();
  @$core.pragma('dart2js:noInline')
  static ExecutionInfo getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ExecutionInfo>(create);
  static ExecutionInfo? _defaultInstance;

  /// Status returned by the backend when the job was created.
  @$pb.TagNumber(1)
  $1795.Status get jobCreationStatus => $_getN(0);
  @$pb.TagNumber(1)
  set jobCreationStatus($1795.Status v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasJobCreationStatus() => $_has(0);
  @$pb.TagNumber(1)
  void clearJobCreationStatus() => clearField(1);
  @$pb.TagNumber(1)
  $1795.Status ensureJobCreationStatus() => $_ensure(0);

  /// Status of the job execution.
  @$pb.TagNumber(2)
  ExecutionInfo_JobExecutionState get jobExecutionState => $_getN(1);
  @$pb.TagNumber(2)
  set jobExecutionState(ExecutionInfo_JobExecutionState v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasJobExecutionState() => $_has(1);
  @$pb.TagNumber(2)
  void clearJobExecutionState() => clearField(2);

  /// Time when the execution was triggered.
  @$pb.TagNumber(3)
  $1775.Timestamp get createTime => $_getN(2);
  @$pb.TagNumber(3)
  set createTime($1775.Timestamp v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasCreateTime() => $_has(2);
  @$pb.TagNumber(3)
  void clearCreateTime() => clearField(3);
  @$pb.TagNumber(3)
  $1775.Timestamp ensureCreateTime() => $_ensure(2);

  /// BigQuery job information.
  /// Future versions will have different backends. Hence, clients must make sure
  /// they can handle it when this field is not populated.
  @$pb.TagNumber(4)
  BigQueryJob get bigqueryJob => $_getN(3);
  @$pb.TagNumber(4)
  set bigqueryJob(BigQueryJob v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasBigqueryJob() => $_has(3);
  @$pb.TagNumber(4)
  void clearBigqueryJob() => clearField(4);
  @$pb.TagNumber(4)
  BigQueryJob ensureBigqueryJob() => $_ensure(3);
}

/// BigQuery job information. This can be used to query the BigQuery API and
/// retrieve the current job's status (using
/// [jobs.get](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/get)).
class BigQueryJob extends $pb.GeneratedMessage {
  factory BigQueryJob({
    $core.String? jobId,
    $core.String? projectId,
    $core.String? location,
  }) {
    final $result = create();
    if (jobId != null) {
      $result.jobId = jobId;
    }
    if (projectId != null) {
      $result.projectId = projectId;
    }
    if (location != null) {
      $result.location = location;
    }
    return $result;
  }
  BigQueryJob._() : super();
  factory BigQueryJob.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory BigQueryJob.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'BigQueryJob', package: const $pb.PackageName(_omitMessageNames ? '' : 'google.cloud.dataqna.v1alpha'), createEmptyInstance: create)
    ..aOS(1, _omitFieldNames ? '' : 'jobId')
    ..aOS(2, _omitFieldNames ? '' : 'projectId')
    ..aOS(3, _omitFieldNames ? '' : 'location')
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  BigQueryJob clone() => BigQueryJob()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  BigQueryJob copyWith(void Function(BigQueryJob) updates) => super.copyWith((message) => updates(message as BigQueryJob)) as BigQueryJob;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static BigQueryJob create() => BigQueryJob._();
  BigQueryJob createEmptyInstance() => create();
  static $pb.PbList<BigQueryJob> createRepeated() => $pb.PbList<BigQueryJob>();
  @$core.pragma('dart2js:noInline')
  static BigQueryJob getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<BigQueryJob>(create);
  static BigQueryJob? _defaultInstance;

  /// The job ID.
  @$pb.TagNumber(1)
  $core.String get jobId => $_getSZ(0);
  @$pb.TagNumber(1)
  set jobId($core.String v) { $_setString(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasJobId() => $_has(0);
  @$pb.TagNumber(1)
  void clearJobId() => clearField(1);

  /// The project ID of the job.
  @$pb.TagNumber(2)
  $core.String get projectId => $_getSZ(1);
  @$pb.TagNumber(2)
  set projectId($core.String v) { $_setString(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasProjectId() => $_has(1);
  @$pb.TagNumber(2)
  void clearProjectId() => clearField(2);

  /// The location where the job is running.
  @$pb.TagNumber(3)
  $core.String get location => $_getSZ(2);
  @$pb.TagNumber(3)
  set location($core.String v) { $_setString(2, v); }
  @$pb.TagNumber(3)
  $core.bool hasLocation() => $_has(2);
  @$pb.TagNumber(3)
  void clearLocation() => clearField(3);
}

/// An interpretation of a natural language query.
class Interpretation extends $pb.GeneratedMessage {
  factory Interpretation({
    $core.Iterable<$core.String>? dataSources,
    $core.double? confidence,
    $core.Iterable<$core.String>? unusedPhrases,
    HumanReadable? humanReadable,
    InterpretationStructure? interpretationStructure,
    DataQuery? dataQuery,
    ExecutionInfo? executionInfo,
  }) {
    final $result = create();
    if (dataSources != null) {
      $result.dataSources.addAll(dataSources);
    }
    if (confidence != null) {
      $result.confidence = confidence;
    }
    if (unusedPhrases != null) {
      $result.unusedPhrases.addAll(unusedPhrases);
    }
    if (humanReadable != null) {
      $result.humanReadable = humanReadable;
    }
    if (interpretationStructure != null) {
      $result.interpretationStructure = interpretationStructure;
    }
    if (dataQuery != null) {
      $result.dataQuery = dataQuery;
    }
    if (executionInfo != null) {
      $result.executionInfo = executionInfo;
    }
    return $result;
  }
  Interpretation._() : super();
  factory Interpretation.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory Interpretation.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'Interpretation', package: const $pb.PackageName(_omitMessageNames ? '' : 'google.cloud.dataqna.v1alpha'), createEmptyInstance: create)
    ..pPS(1, _omitFieldNames ? '' : 'dataSources')
    ..a<$core.double>(2, _omitFieldNames ? '' : 'confidence', $pb.PbFieldType.OD)
    ..pPS(3, _omitFieldNames ? '' : 'unusedPhrases')
    ..aOM<HumanReadable>(4, _omitFieldNames ? '' : 'humanReadable', subBuilder: HumanReadable.create)
    ..aOM<InterpretationStructure>(5, _omitFieldNames ? '' : 'interpretationStructure', subBuilder: InterpretationStructure.create)
    ..aOM<DataQuery>(6, _omitFieldNames ? '' : 'dataQuery', subBuilder: DataQuery.create)
    ..aOM<ExecutionInfo>(7, _omitFieldNames ? '' : 'executionInfo', subBuilder: ExecutionInfo.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  Interpretation clone() => Interpretation()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  Interpretation copyWith(void Function(Interpretation) updates) => super.copyWith((message) => updates(message as Interpretation)) as Interpretation;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static Interpretation create() => Interpretation._();
  Interpretation createEmptyInstance() => create();
  static $pb.PbList<Interpretation> createRepeated() => $pb.PbList<Interpretation>();
  @$core.pragma('dart2js:noInline')
  static Interpretation getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<Interpretation>(create);
  static Interpretation? _defaultInstance;

  /// List of data sources used in the current understanding.
  @$pb.TagNumber(1)
  $core.List<$core.String> get dataSources => $_getList(0);

  /// The level of confidence that one of the interpretations is correct. This is
  /// a value in the range [0, 1] where a value of 0.5 or below is to be
  /// considered a low confidence.
  @$pb.TagNumber(2)
  $core.double get confidence => $_getN(1);
  @$pb.TagNumber(2)
  set confidence($core.double v) { $_setDouble(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasConfidence() => $_has(1);
  @$pb.TagNumber(2)
  void clearConfidence() => clearField(2);

  /// A list of unused phrases. Clients should display a Did You Mean (DYM)
  ///  dialog if this is non-empty, even if this is the only interpretation.
  @$pb.TagNumber(3)
  $core.List<$core.String> get unusedPhrases => $_getList(2);

  /// Human readable representation of the query.
  @$pb.TagNumber(4)
  HumanReadable get humanReadable => $_getN(3);
  @$pb.TagNumber(4)
  set humanReadable(HumanReadable v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasHumanReadable() => $_has(3);
  @$pb.TagNumber(4)
  void clearHumanReadable() => clearField(4);
  @$pb.TagNumber(4)
  HumanReadable ensureHumanReadable() => $_ensure(3);

  /// Information about the interpretation structure that helps to understand and
  /// visualize the response.
  @$pb.TagNumber(5)
  InterpretationStructure get interpretationStructure => $_getN(4);
  @$pb.TagNumber(5)
  set interpretationStructure(InterpretationStructure v) { setField(5, v); }
  @$pb.TagNumber(5)
  $core.bool hasInterpretationStructure() => $_has(4);
  @$pb.TagNumber(5)
  void clearInterpretationStructure() => clearField(5);
  @$pb.TagNumber(5)
  InterpretationStructure ensureInterpretationStructure() => $_ensure(4);

  /// Representation of the data query to be sent to the backend.
  @$pb.TagNumber(6)
  DataQuery get dataQuery => $_getN(5);
  @$pb.TagNumber(6)
  set dataQuery(DataQuery v) { setField(6, v); }
  @$pb.TagNumber(6)
  $core.bool hasDataQuery() => $_has(5);
  @$pb.TagNumber(6)
  void clearDataQuery() => clearField(6);
  @$pb.TagNumber(6)
  DataQuery ensureDataQuery() => $_ensure(5);

  /// Information about the backend response. This is populated only if execution
  /// of an interpretation was requested.
  @$pb.TagNumber(7)
  ExecutionInfo get executionInfo => $_getN(6);
  @$pb.TagNumber(7)
  set executionInfo(ExecutionInfo v) { setField(7, v); }
  @$pb.TagNumber(7)
  $core.bool hasExecutionInfo() => $_has(6);
  @$pb.TagNumber(7)
  void clearExecutionInfo() => clearField(7);
  @$pb.TagNumber(7)
  ExecutionInfo ensureExecutionInfo() => $_ensure(6);
}

/// Representation of the data query for the backend.
/// This is provided for informational purposes only. Clients should not use
/// it to send it to the backend directly, but rather use the `execute` RPC
/// to trigger the execution. Using the `execute` RPC is needed in order to
/// track the state of a question and report on it correctly to the data
/// administrators.
class DataQuery extends $pb.GeneratedMessage {
  factory DataQuery({
    $core.String? sql,
  }) {
    final $result = create();
    if (sql != null) {
      $result.sql = sql;
    }
    return $result;
  }
  DataQuery._() : super();
  factory DataQuery.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DataQuery.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DataQuery', package: const $pb.PackageName(_omitMessageNames ? '' : 'google.cloud.dataqna.v1alpha'), createEmptyInstance: create)
    ..aOS(1, _omitFieldNames ? '' : 'sql')
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DataQuery clone() => DataQuery()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DataQuery copyWith(void Function(DataQuery) updates) => super.copyWith((message) => updates(message as DataQuery)) as DataQuery;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DataQuery create() => DataQuery._();
  DataQuery createEmptyInstance() => create();
  static $pb.PbList<DataQuery> createRepeated() => $pb.PbList<DataQuery>();
  @$core.pragma('dart2js:noInline')
  static DataQuery getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DataQuery>(create);
  static DataQuery? _defaultInstance;

  /// The generated SQL query to be sent to the backend.
  @$pb.TagNumber(1)
  $core.String get sql => $_getSZ(0);
  @$pb.TagNumber(1)
  set sql($core.String v) { $_setString(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasSql() => $_has(0);
  @$pb.TagNumber(1)
  void clearSql() => clearField(1);
}

/// Human readable interpretation.
class HumanReadable extends $pb.GeneratedMessage {
  factory HumanReadable({
    $4471.AnnotatedString? generatedInterpretation,
    $4471.AnnotatedString? originalQuestion,
  }) {
    final $result = create();
    if (generatedInterpretation != null) {
      $result.generatedInterpretation = generatedInterpretation;
    }
    if (originalQuestion != null) {
      $result.originalQuestion = originalQuestion;
    }
    return $result;
  }
  HumanReadable._() : super();
  factory HumanReadable.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory HumanReadable.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'HumanReadable', package: const $pb.PackageName(_omitMessageNames ? '' : 'google.cloud.dataqna.v1alpha'), createEmptyInstance: create)
    ..aOM<$4471.AnnotatedString>(1, _omitFieldNames ? '' : 'generatedInterpretation', subBuilder: $4471.AnnotatedString.create)
    ..aOM<$4471.AnnotatedString>(2, _omitFieldNames ? '' : 'originalQuestion', subBuilder: $4471.AnnotatedString.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  HumanReadable clone() => HumanReadable()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  HumanReadable copyWith(void Function(HumanReadable) updates) => super.copyWith((message) => updates(message as HumanReadable)) as HumanReadable;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static HumanReadable create() => HumanReadable._();
  HumanReadable createEmptyInstance() => create();
  static $pb.PbList<HumanReadable> createRepeated() => $pb.PbList<HumanReadable>();
  @$core.pragma('dart2js:noInline')
  static HumanReadable getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<HumanReadable>(create);
  static HumanReadable? _defaultInstance;

  /// Generated query explaining the interpretation.
  @$pb.TagNumber(1)
  $4471.AnnotatedString get generatedInterpretation => $_getN(0);
  @$pb.TagNumber(1)
  set generatedInterpretation($4471.AnnotatedString v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasGeneratedInterpretation() => $_has(0);
  @$pb.TagNumber(1)
  void clearGeneratedInterpretation() => clearField(1);
  @$pb.TagNumber(1)
  $4471.AnnotatedString ensureGeneratedInterpretation() => $_ensure(0);

  /// Annotations on the original query.
  @$pb.TagNumber(2)
  $4471.AnnotatedString get originalQuestion => $_getN(1);
  @$pb.TagNumber(2)
  set originalQuestion($4471.AnnotatedString v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasOriginalQuestion() => $_has(1);
  @$pb.TagNumber(2)
  void clearOriginalQuestion() => clearField(2);
  @$pb.TagNumber(2)
  $4471.AnnotatedString ensureOriginalQuestion() => $_ensure(1);
}

/// Information about a column.
class InterpretationStructure_ColumnInfo extends $pb.GeneratedMessage {
  factory InterpretationStructure_ColumnInfo({
    $core.String? outputAlias,
    $core.String? displayName,
  }) {
    final $result = create();
    if (outputAlias != null) {
      $result.outputAlias = outputAlias;
    }
    if (displayName != null) {
      $result.displayName = displayName;
    }
    return $result;
  }
  InterpretationStructure_ColumnInfo._() : super();
  factory InterpretationStructure_ColumnInfo.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory InterpretationStructure_ColumnInfo.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'InterpretationStructure.ColumnInfo', package: const $pb.PackageName(_omitMessageNames ? '' : 'google.cloud.dataqna.v1alpha'), createEmptyInstance: create)
    ..aOS(1, _omitFieldNames ? '' : 'outputAlias')
    ..aOS(2, _omitFieldNames ? '' : 'displayName')
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  InterpretationStructure_ColumnInfo clone() => InterpretationStructure_ColumnInfo()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  InterpretationStructure_ColumnInfo copyWith(void Function(InterpretationStructure_ColumnInfo) updates) => super.copyWith((message) => updates(message as InterpretationStructure_ColumnInfo)) as InterpretationStructure_ColumnInfo;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static InterpretationStructure_ColumnInfo create() => InterpretationStructure_ColumnInfo._();
  InterpretationStructure_ColumnInfo createEmptyInstance() => create();
  static $pb.PbList<InterpretationStructure_ColumnInfo> createRepeated() => $pb.PbList<InterpretationStructure_ColumnInfo>();
  @$core.pragma('dart2js:noInline')
  static InterpretationStructure_ColumnInfo getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<InterpretationStructure_ColumnInfo>(create);
  static InterpretationStructure_ColumnInfo? _defaultInstance;

  /// The alias of the output column as used by the backend. For example, the
  /// field name in the schema provided in the query response in BigQuery.
  @$pb.TagNumber(1)
  $core.String get outputAlias => $_getSZ(0);
  @$pb.TagNumber(1)
  set outputAlias($core.String v) { $_setString(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasOutputAlias() => $_has(0);
  @$pb.TagNumber(1)
  void clearOutputAlias() => clearField(1);

  /// Human readable name of the output column.
  @$pb.TagNumber(2)
  $core.String get displayName => $_getSZ(1);
  @$pb.TagNumber(2)
  set displayName($core.String v) { $_setString(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasDisplayName() => $_has(1);
  @$pb.TagNumber(2)
  void clearDisplayName() => clearField(2);
}

/// Information about the interpretation structure that helps to understand and
/// visualize the response.
class InterpretationStructure extends $pb.GeneratedMessage {
  factory InterpretationStructure({
    $core.Iterable<InterpretationStructure_VisualizationType>? visualizationTypes,
    $core.Iterable<InterpretationStructure_ColumnInfo>? columnInfo,
  }) {
    final $result = create();
    if (visualizationTypes != null) {
      $result.visualizationTypes.addAll(visualizationTypes);
    }
    if (columnInfo != null) {
      $result.columnInfo.addAll(columnInfo);
    }
    return $result;
  }
  InterpretationStructure._() : super();
  factory InterpretationStructure.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory InterpretationStructure.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'InterpretationStructure', package: const $pb.PackageName(_omitMessageNames ? '' : 'google.cloud.dataqna.v1alpha'), createEmptyInstance: create)
    ..pc<InterpretationStructure_VisualizationType>(1, _omitFieldNames ? '' : 'visualizationTypes', $pb.PbFieldType.KE, valueOf: InterpretationStructure_VisualizationType.valueOf, enumValues: InterpretationStructure_VisualizationType.values, defaultEnumValue: InterpretationStructure_VisualizationType.VISUALIZATION_TYPE_UNSPECIFIED)
    ..pc<InterpretationStructure_ColumnInfo>(2, _omitFieldNames ? '' : 'columnInfo', $pb.PbFieldType.PM, subBuilder: InterpretationStructure_ColumnInfo.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  InterpretationStructure clone() => InterpretationStructure()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  InterpretationStructure copyWith(void Function(InterpretationStructure) updates) => super.copyWith((message) => updates(message as InterpretationStructure)) as InterpretationStructure;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static InterpretationStructure create() => InterpretationStructure._();
  InterpretationStructure createEmptyInstance() => create();
  static $pb.PbList<InterpretationStructure> createRepeated() => $pb.PbList<InterpretationStructure>();
  @$core.pragma('dart2js:noInline')
  static InterpretationStructure getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<InterpretationStructure>(create);
  static InterpretationStructure? _defaultInstance;

  /// List of possible visualization types to apply for this interpretation. The
  /// order has no relevance.
  @$pb.TagNumber(1)
  $core.List<InterpretationStructure_VisualizationType> get visualizationTypes => $_getList(0);

  /// Information about the output columns, that is, the columns that will be
  /// returned by the backend.
  @$pb.TagNumber(2)
  $core.List<InterpretationStructure_ColumnInfo> get columnInfo => $_getList(1);
}

/// Configuriation of debug flags.
class DebugFlags extends $pb.GeneratedMessage {
  factory DebugFlags({
    $core.bool? includeVaQuery,
    $core.bool? includeNestedVaQuery,
    $core.bool? includeHumanInterpretation,
    $core.bool? includeAquaDebugResponse,
    $fixnum.Int64? timeOverride,
    $core.bool? isInternalGoogleUser,
    $core.bool? ignoreCache,
    $core.bool? includeSearchEntitiesRpc,
    $core.bool? includeListColumnAnnotationsRpc,
    $core.bool? includeVirtualAnalystEntities,
    $core.bool? includeTableList,
    $core.bool? includeDomainList,
  }) {
    final $result = create();
    if (includeVaQuery != null) {
      $result.includeVaQuery = includeVaQuery;
    }
    if (includeNestedVaQuery != null) {
      $result.includeNestedVaQuery = includeNestedVaQuery;
    }
    if (includeHumanInterpretation != null) {
      $result.includeHumanInterpretation = includeHumanInterpretation;
    }
    if (includeAquaDebugResponse != null) {
      $result.includeAquaDebugResponse = includeAquaDebugResponse;
    }
    if (timeOverride != null) {
      $result.timeOverride = timeOverride;
    }
    if (isInternalGoogleUser != null) {
      $result.isInternalGoogleUser = isInternalGoogleUser;
    }
    if (ignoreCache != null) {
      $result.ignoreCache = ignoreCache;
    }
    if (includeSearchEntitiesRpc != null) {
      $result.includeSearchEntitiesRpc = includeSearchEntitiesRpc;
    }
    if (includeListColumnAnnotationsRpc != null) {
      $result.includeListColumnAnnotationsRpc = includeListColumnAnnotationsRpc;
    }
    if (includeVirtualAnalystEntities != null) {
      $result.includeVirtualAnalystEntities = includeVirtualAnalystEntities;
    }
    if (includeTableList != null) {
      $result.includeTableList = includeTableList;
    }
    if (includeDomainList != null) {
      $result.includeDomainList = includeDomainList;
    }
    return $result;
  }
  DebugFlags._() : super();
  factory DebugFlags.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory DebugFlags.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'DebugFlags', package: const $pb.PackageName(_omitMessageNames ? '' : 'google.cloud.dataqna.v1alpha'), createEmptyInstance: create)
    ..aOB(1, _omitFieldNames ? '' : 'includeVaQuery')
    ..aOB(2, _omitFieldNames ? '' : 'includeNestedVaQuery')
    ..aOB(3, _omitFieldNames ? '' : 'includeHumanInterpretation')
    ..aOB(4, _omitFieldNames ? '' : 'includeAquaDebugResponse')
    ..aInt64(5, _omitFieldNames ? '' : 'timeOverride')
    ..aOB(6, _omitFieldNames ? '' : 'isInternalGoogleUser')
    ..aOB(7, _omitFieldNames ? '' : 'ignoreCache')
    ..aOB(8, _omitFieldNames ? '' : 'includeSearchEntitiesRpc')
    ..aOB(9, _omitFieldNames ? '' : 'includeListColumnAnnotationsRpc')
    ..aOB(10, _omitFieldNames ? '' : 'includeVirtualAnalystEntities')
    ..aOB(11, _omitFieldNames ? '' : 'includeTableList')
    ..aOB(12, _omitFieldNames ? '' : 'includeDomainList')
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  DebugFlags clone() => DebugFlags()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  DebugFlags copyWith(void Function(DebugFlags) updates) => super.copyWith((message) => updates(message as DebugFlags)) as DebugFlags;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static DebugFlags create() => DebugFlags._();
  DebugFlags createEmptyInstance() => create();
  static $pb.PbList<DebugFlags> createRepeated() => $pb.PbList<DebugFlags>();
  @$core.pragma('dart2js:noInline')
  static DebugFlags getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<DebugFlags>(create);
  static DebugFlags? _defaultInstance;

  /// Whether to include the original VAQuery.
  @$pb.TagNumber(1)
  $core.bool get includeVaQuery => $_getBF(0);
  @$pb.TagNumber(1)
  set includeVaQuery($core.bool v) { $_setBool(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasIncludeVaQuery() => $_has(0);
  @$pb.TagNumber(1)
  void clearIncludeVaQuery() => clearField(1);

  /// Whether to include the original nested VAQuery.
  @$pb.TagNumber(2)
  $core.bool get includeNestedVaQuery => $_getBF(1);
  @$pb.TagNumber(2)
  set includeNestedVaQuery($core.bool v) { $_setBool(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasIncludeNestedVaQuery() => $_has(1);
  @$pb.TagNumber(2)
  void clearIncludeNestedVaQuery() => clearField(2);

  /// Whether to include the original human interpretation strings generated
  /// by Analyza.
  @$pb.TagNumber(3)
  $core.bool get includeHumanInterpretation => $_getBF(2);
  @$pb.TagNumber(3)
  set includeHumanInterpretation($core.bool v) { $_setBool(2, v); }
  @$pb.TagNumber(3)
  $core.bool hasIncludeHumanInterpretation() => $_has(2);
  @$pb.TagNumber(3)
  void clearIncludeHumanInterpretation() => clearField(3);

  /// Whether to include the Aqua debug response.
  @$pb.TagNumber(4)
  $core.bool get includeAquaDebugResponse => $_getBF(3);
  @$pb.TagNumber(4)
  set includeAquaDebugResponse($core.bool v) { $_setBool(3, v); }
  @$pb.TagNumber(4)
  $core.bool hasIncludeAquaDebugResponse() => $_has(3);
  @$pb.TagNumber(4)
  void clearIncludeAquaDebugResponse() => clearField(4);

  /// The time in milliseconds from Unix epoch to be used
  /// to process the query. This is useful for testing
  /// the queries at different time period.
  /// If not set or time_override <= 0, then the current
  /// time is used.
  @$pb.TagNumber(5)
  $fixnum.Int64 get timeOverride => $_getI64(4);
  @$pb.TagNumber(5)
  set timeOverride($fixnum.Int64 v) { $_setInt64(4, v); }
  @$pb.TagNumber(5)
  $core.bool hasTimeOverride() => $_has(4);
  @$pb.TagNumber(5)
  void clearTimeOverride() => clearField(5);

  /// Set to true if request is initiated by an internal Google user.
  @$pb.TagNumber(6)
  $core.bool get isInternalGoogleUser => $_getBF(5);
  @$pb.TagNumber(6)
  set isInternalGoogleUser($core.bool v) { $_setBool(5, v); }
  @$pb.TagNumber(6)
  $core.bool hasIsInternalGoogleUser() => $_has(5);
  @$pb.TagNumber(6)
  void clearIsInternalGoogleUser() => clearField(6);

  /// Determines whether cache needs to be ignored. If set to
  /// true, cache won't be queried and updated.
  @$pb.TagNumber(7)
  $core.bool get ignoreCache => $_getBF(6);
  @$pb.TagNumber(7)
  set ignoreCache($core.bool v) { $_setBool(6, v); }
  @$pb.TagNumber(7)
  $core.bool hasIgnoreCache() => $_has(6);
  @$pb.TagNumber(7)
  void clearIgnoreCache() => clearField(7);

  /// Whether to include the request/response pair from the call to the
  /// EntityIndex for SearchEntities.
  @$pb.TagNumber(8)
  $core.bool get includeSearchEntitiesRpc => $_getBF(7);
  @$pb.TagNumber(8)
  set includeSearchEntitiesRpc($core.bool v) { $_setBool(7, v); }
  @$pb.TagNumber(8)
  $core.bool hasIncludeSearchEntitiesRpc() => $_has(7);
  @$pb.TagNumber(8)
  void clearIncludeSearchEntitiesRpc() => clearField(8);

  /// Whether to include the request/response pair from the call to the
  /// Annotations service for ListColumnAnnotations.
  @$pb.TagNumber(9)
  $core.bool get includeListColumnAnnotationsRpc => $_getBF(8);
  @$pb.TagNumber(9)
  set includeListColumnAnnotationsRpc($core.bool v) { $_setBool(8, v); }
  @$pb.TagNumber(9)
  $core.bool hasIncludeListColumnAnnotationsRpc() => $_has(8);
  @$pb.TagNumber(9)
  void clearIncludeListColumnAnnotationsRpc() => clearField(9);

  /// Whether to include the entity list passed to Analyza.
  @$pb.TagNumber(10)
  $core.bool get includeVirtualAnalystEntities => $_getBF(9);
  @$pb.TagNumber(10)
  set includeVirtualAnalystEntities($core.bool v) { $_setBool(9, v); }
  @$pb.TagNumber(10)
  $core.bool hasIncludeVirtualAnalystEntities() => $_has(9);
  @$pb.TagNumber(10)
  void clearIncludeVirtualAnalystEntities() => clearField(10);

  /// Whether to include the table list.
  @$pb.TagNumber(11)
  $core.bool get includeTableList => $_getBF(10);
  @$pb.TagNumber(11)
  set includeTableList($core.bool v) { $_setBool(10, v); }
  @$pb.TagNumber(11)
  $core.bool hasIncludeTableList() => $_has(10);
  @$pb.TagNumber(11)
  void clearIncludeTableList() => clearField(11);

  /// Whether to include the domain list.
  @$pb.TagNumber(12)
  $core.bool get includeDomainList => $_getBF(11);
  @$pb.TagNumber(12)
  set includeDomainList($core.bool v) { $_setBool(11, v); }
  @$pb.TagNumber(12)
  $core.bool hasIncludeDomainList() => $_has(11);
  @$pb.TagNumber(12)
  void clearIncludeDomainList() => clearField(12);
}


const _omitFieldNames = $core.bool.fromEnvironment('protobuf.omit_field_names');
const _omitMessageNames = $core.bool.fromEnvironment('protobuf.omit_message_names');
