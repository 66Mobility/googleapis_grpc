//
//  Generated code. Do not modify.
//  source: google/cloud/aiplatform/v1/completion_stats.proto
//
// @dart = 2.12

// ignore_for_file: annotate_overrides, camel_case_types, comment_references
// ignore_for_file: constant_identifier_names, library_prefixes
// ignore_for_file: non_constant_identifier_names, prefer_final_fields
// ignore_for_file: unnecessary_import, unnecessary_this, unused_import

import 'dart:core' as $core;

import 'package:fixnum/fixnum.dart' as $fixnum;
import 'package:protobuf/protobuf.dart' as $pb;

/// Success and error statistics of processing multiple entities
/// (for example, DataItems or structured data rows) in batch.
class CompletionStats extends $pb.GeneratedMessage {
  factory CompletionStats({
    $fixnum.Int64? successfulCount,
    $fixnum.Int64? failedCount,
    $fixnum.Int64? incompleteCount,
    $fixnum.Int64? successfulForecastPointCount,
  }) {
    final $result = create();
    if (successfulCount != null) {
      $result.successfulCount = successfulCount;
    }
    if (failedCount != null) {
      $result.failedCount = failedCount;
    }
    if (incompleteCount != null) {
      $result.incompleteCount = incompleteCount;
    }
    if (successfulForecastPointCount != null) {
      $result.successfulForecastPointCount = successfulForecastPointCount;
    }
    return $result;
  }
  CompletionStats._() : super();
  factory CompletionStats.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory CompletionStats.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'CompletionStats', package: const $pb.PackageName(_omitMessageNames ? '' : 'google.cloud.aiplatform.v1'), createEmptyInstance: create)
    ..aInt64(1, _omitFieldNames ? '' : 'successfulCount')
    ..aInt64(2, _omitFieldNames ? '' : 'failedCount')
    ..aInt64(3, _omitFieldNames ? '' : 'incompleteCount')
    ..aInt64(5, _omitFieldNames ? '' : 'successfulForecastPointCount')
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  CompletionStats clone() => CompletionStats()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  CompletionStats copyWith(void Function(CompletionStats) updates) => super.copyWith((message) => updates(message as CompletionStats)) as CompletionStats;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static CompletionStats create() => CompletionStats._();
  CompletionStats createEmptyInstance() => create();
  static $pb.PbList<CompletionStats> createRepeated() => $pb.PbList<CompletionStats>();
  @$core.pragma('dart2js:noInline')
  static CompletionStats getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<CompletionStats>(create);
  static CompletionStats? _defaultInstance;

  /// Output only. The number of entities that had been processed successfully.
  @$pb.TagNumber(1)
  $fixnum.Int64 get successfulCount => $_getI64(0);
  @$pb.TagNumber(1)
  set successfulCount($fixnum.Int64 v) { $_setInt64(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasSuccessfulCount() => $_has(0);
  @$pb.TagNumber(1)
  void clearSuccessfulCount() => clearField(1);

  /// Output only. The number of entities for which any error was encountered.
  @$pb.TagNumber(2)
  $fixnum.Int64 get failedCount => $_getI64(1);
  @$pb.TagNumber(2)
  set failedCount($fixnum.Int64 v) { $_setInt64(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasFailedCount() => $_has(1);
  @$pb.TagNumber(2)
  void clearFailedCount() => clearField(2);

  /// Output only. In cases when enough errors are encountered a job, pipeline,
  /// or operation may be failed as a whole. Below is the number of entities for
  /// which the processing had not been finished (either in successful or failed
  /// state). Set to -1 if the number is unknown (for example, the operation
  /// failed before the total entity number could be collected).
  @$pb.TagNumber(3)
  $fixnum.Int64 get incompleteCount => $_getI64(2);
  @$pb.TagNumber(3)
  set incompleteCount($fixnum.Int64 v) { $_setInt64(2, v); }
  @$pb.TagNumber(3)
  $core.bool hasIncompleteCount() => $_has(2);
  @$pb.TagNumber(3)
  void clearIncompleteCount() => clearField(3);

  /// Output only. The number of the successful forecast points that are
  /// generated by the forecasting model. This is ONLY used by the forecasting
  /// batch prediction.
  @$pb.TagNumber(5)
  $fixnum.Int64 get successfulForecastPointCount => $_getI64(3);
  @$pb.TagNumber(5)
  set successfulForecastPointCount($fixnum.Int64 v) { $_setInt64(3, v); }
  @$pb.TagNumber(5)
  $core.bool hasSuccessfulForecastPointCount() => $_has(3);
  @$pb.TagNumber(5)
  void clearSuccessfulForecastPointCount() => clearField(5);
}


const _omitFieldNames = $core.bool.fromEnvironment('protobuf.omit_field_names');
const _omitMessageNames = $core.bool.fromEnvironment('protobuf.omit_message_names');
