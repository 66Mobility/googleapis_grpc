//
//  Generated code. Do not modify.
//  source: google/cloud/talent/v4beta1/tenant.proto
//
// @dart = 2.12

// ignore_for_file: annotate_overrides, camel_case_types, comment_references
// ignore_for_file: constant_identifier_names, library_prefixes
// ignore_for_file: non_constant_identifier_names, prefer_final_fields
// ignore_for_file: unnecessary_import, unnecessary_this, unused_import

import 'dart:core' as $core;

import 'package:protobuf/protobuf.dart' as $pb;

import 'tenant.pbenum.dart';

export 'tenant.pbenum.dart';

/// A Tenant resource represents a tenant in the service. A tenant is a group or
/// entity that shares common access with specific privileges for resources like
/// profiles. Customer may create multiple tenants to provide data isolation for
/// different groups.
class Tenant extends $pb.GeneratedMessage {
  factory Tenant({
    $core.String? name,
    $core.String? externalId,
    Tenant_DataUsageType? usageType,
    $core.Iterable<$core.String>? keywordSearchableProfileCustomAttributes,
  }) {
    final $result = create();
    if (name != null) {
      $result.name = name;
    }
    if (externalId != null) {
      $result.externalId = externalId;
    }
    if (usageType != null) {
      $result.usageType = usageType;
    }
    if (keywordSearchableProfileCustomAttributes != null) {
      $result.keywordSearchableProfileCustomAttributes.addAll(keywordSearchableProfileCustomAttributes);
    }
    return $result;
  }
  Tenant._() : super();
  factory Tenant.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory Tenant.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'Tenant', package: const $pb.PackageName(_omitMessageNames ? '' : 'google.cloud.talent.v4beta1'), createEmptyInstance: create)
    ..aOS(1, _omitFieldNames ? '' : 'name')
    ..aOS(2, _omitFieldNames ? '' : 'externalId')
    ..e<Tenant_DataUsageType>(3, _omitFieldNames ? '' : 'usageType', $pb.PbFieldType.OE, defaultOrMaker: Tenant_DataUsageType.DATA_USAGE_TYPE_UNSPECIFIED, valueOf: Tenant_DataUsageType.valueOf, enumValues: Tenant_DataUsageType.values)
    ..pPS(4, _omitFieldNames ? '' : 'keywordSearchableProfileCustomAttributes')
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  Tenant clone() => Tenant()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  Tenant copyWith(void Function(Tenant) updates) => super.copyWith((message) => updates(message as Tenant)) as Tenant;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static Tenant create() => Tenant._();
  Tenant createEmptyInstance() => create();
  static $pb.PbList<Tenant> createRepeated() => $pb.PbList<Tenant>();
  @$core.pragma('dart2js:noInline')
  static Tenant getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<Tenant>(create);
  static Tenant? _defaultInstance;

  ///  Required during tenant update.
  ///
  ///  The resource name for a tenant. This is generated by the service when a
  ///  tenant is created.
  ///
  ///  The format is "projects/{project_id}/tenants/{tenant_id}", for example,
  ///  "projects/foo/tenants/bar".
  @$pb.TagNumber(1)
  $core.String get name => $_getSZ(0);
  @$pb.TagNumber(1)
  set name($core.String v) { $_setString(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasName() => $_has(0);
  @$pb.TagNumber(1)
  void clearName() => clearField(1);

  ///  Required. Client side tenant identifier, used to uniquely identify the
  ///  tenant.
  ///
  ///  The maximum number of allowed characters is 255.
  @$pb.TagNumber(2)
  $core.String get externalId => $_getSZ(1);
  @$pb.TagNumber(2)
  set externalId($core.String v) { $_setString(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasExternalId() => $_has(1);
  @$pb.TagNumber(2)
  void clearExternalId() => clearField(2);

  ///  Indicates whether data owned by this tenant may be used to provide product
  ///  improvements across other tenants.
  ///
  ///  Defaults behavior is
  ///  [DataUsageType.ISOLATED][google.cloud.talent.v4beta1.Tenant.DataUsageType.ISOLATED]
  ///  if it's unset.
  @$pb.TagNumber(3)
  Tenant_DataUsageType get usageType => $_getN(2);
  @$pb.TagNumber(3)
  set usageType(Tenant_DataUsageType v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasUsageType() => $_has(2);
  @$pb.TagNumber(3)
  void clearUsageType() => clearField(3);

  /// A list of keys of filterable
  /// [Profile.custom_attributes][google.cloud.talent.v4beta1.Profile.custom_attributes],
  /// whose corresponding `string_values` are used in keyword searches. Profiles
  /// with `string_values` under these specified field keys are returned if any
  /// of the values match the search keyword. Custom field values with
  /// parenthesis, brackets and special symbols are not searchable as-is,
  /// and must be surrounded by quotes.
  @$pb.TagNumber(4)
  $core.List<$core.String> get keywordSearchableProfileCustomAttributes => $_getList(3);
}


const _omitFieldNames = $core.bool.fromEnvironment('protobuf.omit_field_names');
const _omitMessageNames = $core.bool.fromEnvironment('protobuf.omit_message_names');
