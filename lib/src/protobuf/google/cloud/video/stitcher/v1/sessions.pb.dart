//
//  Generated code. Do not modify.
//  source: google/cloud/video/stitcher/v1/sessions.proto
//
// @dart = 2.12

// ignore_for_file: annotate_overrides, camel_case_types, comment_references
// ignore_for_file: constant_identifier_names, library_prefixes
// ignore_for_file: non_constant_identifier_names, prefer_final_fields
// ignore_for_file: unnecessary_import, unnecessary_this, unused_import

import 'dart:core' as $core;

import 'package:protobuf/protobuf.dart' as $pb;

import '../../../../protobuf/duration.pb.dart' as $1738;
import 'companions.pb.dart' as $4705;
import 'events.pb.dart' as $4703;
import 'live_configs.pbenum.dart' as $1471;
import 'sessions.pbenum.dart';

export 'sessions.pbenum.dart';

/// Defines fields related to Google Ad Manager (GAM). This should be set if
/// GAM is being used for ads.
class VodSession_GamSettings extends $pb.GeneratedMessage {
  factory VodSession_GamSettings({
    $core.String? networkCode,
    $core.String? streamId,
  }) {
    final $result = create();
    if (networkCode != null) {
      $result.networkCode = networkCode;
    }
    if (streamId != null) {
      $result.streamId = streamId;
    }
    return $result;
  }
  VodSession_GamSettings._() : super();
  factory VodSession_GamSettings.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory VodSession_GamSettings.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'VodSession.GamSettings', package: const $pb.PackageName(_omitMessageNames ? '' : 'google.cloud.video.stitcher.v1'), createEmptyInstance: create)
    ..aOS(1, _omitFieldNames ? '' : 'networkCode')
    ..aOS(2, _omitFieldNames ? '' : 'streamId')
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  VodSession_GamSettings clone() => VodSession_GamSettings()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  VodSession_GamSettings copyWith(void Function(VodSession_GamSettings) updates) => super.copyWith((message) => updates(message as VodSession_GamSettings)) as VodSession_GamSettings;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static VodSession_GamSettings create() => VodSession_GamSettings._();
  VodSession_GamSettings createEmptyInstance() => create();
  static $pb.PbList<VodSession_GamSettings> createRepeated() => $pb.PbList<VodSession_GamSettings>();
  @$core.pragma('dart2js:noInline')
  static VodSession_GamSettings getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<VodSession_GamSettings>(create);
  static VodSession_GamSettings? _defaultInstance;

  /// Required. Ad Manager network code.
  @$pb.TagNumber(1)
  $core.String get networkCode => $_getSZ(0);
  @$pb.TagNumber(1)
  set networkCode($core.String v) { $_setString(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasNetworkCode() => $_has(0);
  @$pb.TagNumber(1)
  void clearNetworkCode() => clearField(1);

  /// Required. The stream ID generated by Ad Manager.
  @$pb.TagNumber(2)
  $core.String get streamId => $_getSZ(1);
  @$pb.TagNumber(2)
  set streamId($core.String v) { $_setString(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasStreamId() => $_has(1);
  @$pb.TagNumber(2)
  void clearStreamId() => clearField(2);
}

/// Metadata for a VOD session. The session expires 4 hours after its creation.
class VodSession extends $pb.GeneratedMessage {
  factory VodSession({
    $core.String? name,
    Interstitials? interstitials,
    $core.String? playUri,
    $core.String? sourceUri,
    $core.String? adTagUri,
    $core.Map<$core.String, $core.String>? adTagMacroMap,
    ManifestOptions? manifestOptions,
    $core.String? assetId,
    $1471.AdTracking? adTracking,
    VodSession_GamSettings? gamSettings,
    $core.String? vodConfig,
  }) {
    final $result = create();
    if (name != null) {
      $result.name = name;
    }
    if (interstitials != null) {
      $result.interstitials = interstitials;
    }
    if (playUri != null) {
      $result.playUri = playUri;
    }
    if (sourceUri != null) {
      $result.sourceUri = sourceUri;
    }
    if (adTagUri != null) {
      $result.adTagUri = adTagUri;
    }
    if (adTagMacroMap != null) {
      $result.adTagMacroMap.addAll(adTagMacroMap);
    }
    if (manifestOptions != null) {
      $result.manifestOptions = manifestOptions;
    }
    if (assetId != null) {
      $result.assetId = assetId;
    }
    if (adTracking != null) {
      $result.adTracking = adTracking;
    }
    if (gamSettings != null) {
      $result.gamSettings = gamSettings;
    }
    if (vodConfig != null) {
      $result.vodConfig = vodConfig;
    }
    return $result;
  }
  VodSession._() : super();
  factory VodSession.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory VodSession.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'VodSession', package: const $pb.PackageName(_omitMessageNames ? '' : 'google.cloud.video.stitcher.v1'), createEmptyInstance: create)
    ..aOS(1, _omitFieldNames ? '' : 'name')
    ..aOM<Interstitials>(2, _omitFieldNames ? '' : 'interstitials', subBuilder: Interstitials.create)
    ..aOS(4, _omitFieldNames ? '' : 'playUri')
    ..aOS(5, _omitFieldNames ? '' : 'sourceUri')
    ..aOS(6, _omitFieldNames ? '' : 'adTagUri')
    ..m<$core.String, $core.String>(7, _omitFieldNames ? '' : 'adTagMacroMap', entryClassName: 'VodSession.AdTagMacroMapEntry', keyFieldType: $pb.PbFieldType.OS, valueFieldType: $pb.PbFieldType.OS, packageName: const $pb.PackageName('google.cloud.video.stitcher.v1'))
    ..aOM<ManifestOptions>(9, _omitFieldNames ? '' : 'manifestOptions', subBuilder: ManifestOptions.create)
    ..aOS(10, _omitFieldNames ? '' : 'assetId')
    ..e<$1471.AdTracking>(11, _omitFieldNames ? '' : 'adTracking', $pb.PbFieldType.OE, defaultOrMaker: $1471.AdTracking.AD_TRACKING_UNSPECIFIED, valueOf: $1471.AdTracking.valueOf, enumValues: $1471.AdTracking.values)
    ..aOM<VodSession_GamSettings>(13, _omitFieldNames ? '' : 'gamSettings', subBuilder: VodSession_GamSettings.create)
    ..aOS(14, _omitFieldNames ? '' : 'vodConfig')
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  VodSession clone() => VodSession()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  VodSession copyWith(void Function(VodSession) updates) => super.copyWith((message) => updates(message as VodSession)) as VodSession;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static VodSession create() => VodSession._();
  VodSession createEmptyInstance() => create();
  static $pb.PbList<VodSession> createRepeated() => $pb.PbList<VodSession>();
  @$core.pragma('dart2js:noInline')
  static VodSession getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<VodSession>(create);
  static VodSession? _defaultInstance;

  /// Output only. The name of the VOD session, in the form of
  /// `projects/{project_number}/locations/{location}/vodSessions/{id}`.
  @$pb.TagNumber(1)
  $core.String get name => $_getSZ(0);
  @$pb.TagNumber(1)
  set name($core.String v) { $_setString(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasName() => $_has(0);
  @$pb.TagNumber(1)
  void clearName() => clearField(1);

  /// Output only. Metadata of what was stitched into the content.
  @$pb.TagNumber(2)
  Interstitials get interstitials => $_getN(1);
  @$pb.TagNumber(2)
  set interstitials(Interstitials v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasInterstitials() => $_has(1);
  @$pb.TagNumber(2)
  void clearInterstitials() => clearField(2);
  @$pb.TagNumber(2)
  Interstitials ensureInterstitials() => $_ensure(1);

  /// Output only. The playback URI of the stitched content.
  @$pb.TagNumber(4)
  $core.String get playUri => $_getSZ(2);
  @$pb.TagNumber(4)
  set playUri($core.String v) { $_setString(2, v); }
  @$pb.TagNumber(4)
  $core.bool hasPlayUri() => $_has(2);
  @$pb.TagNumber(4)
  void clearPlayUri() => clearField(4);

  /// URI of the media to stitch. For most use cases, you should create a
  /// [VodConfig][google.cloud.video.stitcher.v1.VodConfig] with this information
  /// rather than setting this field directly.
  @$pb.TagNumber(5)
  $core.String get sourceUri => $_getSZ(3);
  @$pb.TagNumber(5)
  set sourceUri($core.String v) { $_setString(3, v); }
  @$pb.TagNumber(5)
  $core.bool hasSourceUri() => $_has(3);
  @$pb.TagNumber(5)
  void clearSourceUri() => clearField(5);

  /// Ad tag URI. For most use cases, you should create a
  /// [VodConfig][google.cloud.video.stitcher.v1.VodConfig] with this information
  /// rather than setting this field directly.
  @$pb.TagNumber(6)
  $core.String get adTagUri => $_getSZ(4);
  @$pb.TagNumber(6)
  set adTagUri($core.String v) { $_setString(4, v); }
  @$pb.TagNumber(6)
  $core.bool hasAdTagUri() => $_has(4);
  @$pb.TagNumber(6)
  void clearAdTagUri() => clearField(6);

  ///  Key value pairs for ad tag macro replacement, only available for VOD
  ///  sessions that do not implement Google Ad manager ad insertion. If the
  ///  specified ad tag URI has macros, this field provides the mapping to the
  ///  value that will replace the macro in the ad tag URI.
  ///
  ///  Macros are designated by square brackets, for example:
  ///
  ///    Ad tag URI: `"https://doubleclick.google.com/ad/1?geo_id=[geoId]"`
  ///
  ///    Ad tag macro map: `{"geoId": "123"}`
  ///
  ///    Fully qualified ad tag:
  ///    `"https://doubleclick.google.com/ad/1?geo_id=123"`
  @$pb.TagNumber(7)
  $core.Map<$core.String, $core.String> get adTagMacroMap => $_getMap(5);

  /// Additional options that affect the output of the manifest.
  @$pb.TagNumber(9)
  ManifestOptions get manifestOptions => $_getN(6);
  @$pb.TagNumber(9)
  set manifestOptions(ManifestOptions v) { setField(9, v); }
  @$pb.TagNumber(9)
  $core.bool hasManifestOptions() => $_has(6);
  @$pb.TagNumber(9)
  void clearManifestOptions() => clearField(9);
  @$pb.TagNumber(9)
  ManifestOptions ensureManifestOptions() => $_ensure(6);

  /// Output only. The generated ID of the VodSession's source media.
  @$pb.TagNumber(10)
  $core.String get assetId => $_getSZ(7);
  @$pb.TagNumber(10)
  set assetId($core.String v) { $_setString(7, v); }
  @$pb.TagNumber(10)
  $core.bool hasAssetId() => $_has(7);
  @$pb.TagNumber(10)
  void clearAssetId() => clearField(10);

  /// Required. Determines how the ad should be tracked.
  @$pb.TagNumber(11)
  $1471.AdTracking get adTracking => $_getN(8);
  @$pb.TagNumber(11)
  set adTracking($1471.AdTracking v) { setField(11, v); }
  @$pb.TagNumber(11)
  $core.bool hasAdTracking() => $_has(8);
  @$pb.TagNumber(11)
  void clearAdTracking() => clearField(11);

  /// This field should be set with appropriate values if GAM is being used for
  /// ads.
  @$pb.TagNumber(13)
  VodSession_GamSettings get gamSettings => $_getN(9);
  @$pb.TagNumber(13)
  set gamSettings(VodSession_GamSettings v) { setField(13, v); }
  @$pb.TagNumber(13)
  $core.bool hasGamSettings() => $_has(9);
  @$pb.TagNumber(13)
  void clearGamSettings() => clearField(13);
  @$pb.TagNumber(13)
  VodSession_GamSettings ensureGamSettings() => $_ensure(9);

  /// The resource name of the VOD config for this session, in the form of
  /// `projects/{project}/locations/{location}/vodConfigs/{id}`.
  @$pb.TagNumber(14)
  $core.String get vodConfig => $_getSZ(10);
  @$pb.TagNumber(14)
  set vodConfig($core.String v) { $_setString(10, v); }
  @$pb.TagNumber(14)
  $core.bool hasVodConfig() => $_has(10);
  @$pb.TagNumber(14)
  void clearVodConfig() => clearField(14);
}

/// Describes what was stitched into a VOD session's manifest.
class Interstitials extends $pb.GeneratedMessage {
  factory Interstitials({
    $core.Iterable<VodSessionAdBreak>? adBreaks,
    VodSessionContent? sessionContent,
  }) {
    final $result = create();
    if (adBreaks != null) {
      $result.adBreaks.addAll(adBreaks);
    }
    if (sessionContent != null) {
      $result.sessionContent = sessionContent;
    }
    return $result;
  }
  Interstitials._() : super();
  factory Interstitials.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory Interstitials.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'Interstitials', package: const $pb.PackageName(_omitMessageNames ? '' : 'google.cloud.video.stitcher.v1'), createEmptyInstance: create)
    ..pc<VodSessionAdBreak>(1, _omitFieldNames ? '' : 'adBreaks', $pb.PbFieldType.PM, subBuilder: VodSessionAdBreak.create)
    ..aOM<VodSessionContent>(2, _omitFieldNames ? '' : 'sessionContent', subBuilder: VodSessionContent.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  Interstitials clone() => Interstitials()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  Interstitials copyWith(void Function(Interstitials) updates) => super.copyWith((message) => updates(message as Interstitials)) as Interstitials;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static Interstitials create() => Interstitials._();
  Interstitials createEmptyInstance() => create();
  static $pb.PbList<Interstitials> createRepeated() => $pb.PbList<Interstitials>();
  @$core.pragma('dart2js:noInline')
  static Interstitials getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<Interstitials>(create);
  static Interstitials? _defaultInstance;

  /// List of ad breaks ordered by time.
  @$pb.TagNumber(1)
  $core.List<VodSessionAdBreak> get adBreaks => $_getList(0);

  /// Information related to the content of the VOD session.
  @$pb.TagNumber(2)
  VodSessionContent get sessionContent => $_getN(1);
  @$pb.TagNumber(2)
  set sessionContent(VodSessionContent v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasSessionContent() => $_has(1);
  @$pb.TagNumber(2)
  void clearSessionContent() => clearField(2);
  @$pb.TagNumber(2)
  VodSessionContent ensureSessionContent() => $_ensure(1);
}

/// Metadata for an inserted ad in a VOD session.
class VodSessionAd extends $pb.GeneratedMessage {
  factory VodSessionAd({
    $1738.Duration? duration,
    $4705.CompanionAds? companionAds,
    $core.Iterable<$4703.Event>? activityEvents,
  }) {
    final $result = create();
    if (duration != null) {
      $result.duration = duration;
    }
    if (companionAds != null) {
      $result.companionAds = companionAds;
    }
    if (activityEvents != null) {
      $result.activityEvents.addAll(activityEvents);
    }
    return $result;
  }
  VodSessionAd._() : super();
  factory VodSessionAd.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory VodSessionAd.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'VodSessionAd', package: const $pb.PackageName(_omitMessageNames ? '' : 'google.cloud.video.stitcher.v1'), createEmptyInstance: create)
    ..aOM<$1738.Duration>(1, _omitFieldNames ? '' : 'duration', subBuilder: $1738.Duration.create)
    ..aOM<$4705.CompanionAds>(2, _omitFieldNames ? '' : 'companionAds', subBuilder: $4705.CompanionAds.create)
    ..pc<$4703.Event>(3, _omitFieldNames ? '' : 'activityEvents', $pb.PbFieldType.PM, subBuilder: $4703.Event.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  VodSessionAd clone() => VodSessionAd()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  VodSessionAd copyWith(void Function(VodSessionAd) updates) => super.copyWith((message) => updates(message as VodSessionAd)) as VodSessionAd;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static VodSessionAd create() => VodSessionAd._();
  VodSessionAd createEmptyInstance() => create();
  static $pb.PbList<VodSessionAd> createRepeated() => $pb.PbList<VodSessionAd>();
  @$core.pragma('dart2js:noInline')
  static VodSessionAd getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<VodSessionAd>(create);
  static VodSessionAd? _defaultInstance;

  /// Duration in seconds of the ad.
  @$pb.TagNumber(1)
  $1738.Duration get duration => $_getN(0);
  @$pb.TagNumber(1)
  set duration($1738.Duration v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasDuration() => $_has(0);
  @$pb.TagNumber(1)
  void clearDuration() => clearField(1);
  @$pb.TagNumber(1)
  $1738.Duration ensureDuration() => $_ensure(0);

  /// Metadata of companion ads associated with the ad.
  @$pb.TagNumber(2)
  $4705.CompanionAds get companionAds => $_getN(1);
  @$pb.TagNumber(2)
  set companionAds($4705.CompanionAds v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasCompanionAds() => $_has(1);
  @$pb.TagNumber(2)
  void clearCompanionAds() => clearField(2);
  @$pb.TagNumber(2)
  $4705.CompanionAds ensureCompanionAds() => $_ensure(1);

  /// The list of progress tracking events for the ad break. These can be of
  /// the following IAB types: `MUTE`, `UNMUTE`, `PAUSE`, `CLICK`,
  /// `CLICK_THROUGH`, `REWIND`, `RESUME`, `ERROR`, `FULLSCREEN`,
  /// `EXIT_FULLSCREEN`, `EXPAND`, `COLLAPSE`, `ACCEPT_INVITATION_LINEAR`,
  /// `CLOSE_LINEAR`, `SKIP`.
  @$pb.TagNumber(3)
  $core.List<$4703.Event> get activityEvents => $_getList(2);
}

/// Metadata for the entire stitched content in a VOD session.
class VodSessionContent extends $pb.GeneratedMessage {
  factory VodSessionContent({
    $1738.Duration? duration,
  }) {
    final $result = create();
    if (duration != null) {
      $result.duration = duration;
    }
    return $result;
  }
  VodSessionContent._() : super();
  factory VodSessionContent.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory VodSessionContent.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'VodSessionContent', package: const $pb.PackageName(_omitMessageNames ? '' : 'google.cloud.video.stitcher.v1'), createEmptyInstance: create)
    ..aOM<$1738.Duration>(1, _omitFieldNames ? '' : 'duration', subBuilder: $1738.Duration.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  VodSessionContent clone() => VodSessionContent()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  VodSessionContent copyWith(void Function(VodSessionContent) updates) => super.copyWith((message) => updates(message as VodSessionContent)) as VodSessionContent;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static VodSessionContent create() => VodSessionContent._();
  VodSessionContent createEmptyInstance() => create();
  static $pb.PbList<VodSessionContent> createRepeated() => $pb.PbList<VodSessionContent>();
  @$core.pragma('dart2js:noInline')
  static VodSessionContent getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<VodSessionContent>(create);
  static VodSessionContent? _defaultInstance;

  /// The total duration in seconds of the content including the ads stitched
  /// in.
  @$pb.TagNumber(1)
  $1738.Duration get duration => $_getN(0);
  @$pb.TagNumber(1)
  set duration($1738.Duration v) { setField(1, v); }
  @$pb.TagNumber(1)
  $core.bool hasDuration() => $_has(0);
  @$pb.TagNumber(1)
  void clearDuration() => clearField(1);
  @$pb.TagNumber(1)
  $1738.Duration ensureDuration() => $_ensure(0);
}

/// Metadata for an inserted ad break.
class VodSessionAdBreak extends $pb.GeneratedMessage {
  factory VodSessionAdBreak({
    $core.Iterable<$4703.ProgressEvent>? progressEvents,
    $core.Iterable<VodSessionAd>? ads,
    $1738.Duration? endTimeOffset,
    $1738.Duration? startTimeOffset,
  }) {
    final $result = create();
    if (progressEvents != null) {
      $result.progressEvents.addAll(progressEvents);
    }
    if (ads != null) {
      $result.ads.addAll(ads);
    }
    if (endTimeOffset != null) {
      $result.endTimeOffset = endTimeOffset;
    }
    if (startTimeOffset != null) {
      $result.startTimeOffset = startTimeOffset;
    }
    return $result;
  }
  VodSessionAdBreak._() : super();
  factory VodSessionAdBreak.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory VodSessionAdBreak.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'VodSessionAdBreak', package: const $pb.PackageName(_omitMessageNames ? '' : 'google.cloud.video.stitcher.v1'), createEmptyInstance: create)
    ..pc<$4703.ProgressEvent>(1, _omitFieldNames ? '' : 'progressEvents', $pb.PbFieldType.PM, subBuilder: $4703.ProgressEvent.create)
    ..pc<VodSessionAd>(2, _omitFieldNames ? '' : 'ads', $pb.PbFieldType.PM, subBuilder: VodSessionAd.create)
    ..aOM<$1738.Duration>(3, _omitFieldNames ? '' : 'endTimeOffset', subBuilder: $1738.Duration.create)
    ..aOM<$1738.Duration>(4, _omitFieldNames ? '' : 'startTimeOffset', subBuilder: $1738.Duration.create)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  VodSessionAdBreak clone() => VodSessionAdBreak()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  VodSessionAdBreak copyWith(void Function(VodSessionAdBreak) updates) => super.copyWith((message) => updates(message as VodSessionAdBreak)) as VodSessionAdBreak;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static VodSessionAdBreak create() => VodSessionAdBreak._();
  VodSessionAdBreak createEmptyInstance() => create();
  static $pb.PbList<VodSessionAdBreak> createRepeated() => $pb.PbList<VodSessionAdBreak>();
  @$core.pragma('dart2js:noInline')
  static VodSessionAdBreak getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<VodSessionAdBreak>(create);
  static VodSessionAdBreak? _defaultInstance;

  /// List of events that are expected to be triggered, ordered by time.
  @$pb.TagNumber(1)
  $core.List<$4703.ProgressEvent> get progressEvents => $_getList(0);

  /// Ordered list of ads stitched into the ad break.
  @$pb.TagNumber(2)
  $core.List<VodSessionAd> get ads => $_getList(1);

  /// Ad break end time in seconds relative to the start of the VOD asset.
  @$pb.TagNumber(3)
  $1738.Duration get endTimeOffset => $_getN(2);
  @$pb.TagNumber(3)
  set endTimeOffset($1738.Duration v) { setField(3, v); }
  @$pb.TagNumber(3)
  $core.bool hasEndTimeOffset() => $_has(2);
  @$pb.TagNumber(3)
  void clearEndTimeOffset() => clearField(3);
  @$pb.TagNumber(3)
  $1738.Duration ensureEndTimeOffset() => $_ensure(2);

  /// Ad break start time in seconds relative to the start of the VOD asset.
  @$pb.TagNumber(4)
  $1738.Duration get startTimeOffset => $_getN(3);
  @$pb.TagNumber(4)
  set startTimeOffset($1738.Duration v) { setField(4, v); }
  @$pb.TagNumber(4)
  $core.bool hasStartTimeOffset() => $_has(3);
  @$pb.TagNumber(4)
  void clearStartTimeOffset() => clearField(4);
  @$pb.TagNumber(4)
  $1738.Duration ensureStartTimeOffset() => $_ensure(3);
}

/// Defines fields related to Google Ad Manager (GAM).
class LiveSession_GamSettings extends $pb.GeneratedMessage {
  factory LiveSession_GamSettings({
    $core.String? streamId,
    $core.Map<$core.String, $core.String>? targetingParameters,
  }) {
    final $result = create();
    if (streamId != null) {
      $result.streamId = streamId;
    }
    if (targetingParameters != null) {
      $result.targetingParameters.addAll(targetingParameters);
    }
    return $result;
  }
  LiveSession_GamSettings._() : super();
  factory LiveSession_GamSettings.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory LiveSession_GamSettings.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'LiveSession.GamSettings', package: const $pb.PackageName(_omitMessageNames ? '' : 'google.cloud.video.stitcher.v1'), createEmptyInstance: create)
    ..aOS(1, _omitFieldNames ? '' : 'streamId')
    ..m<$core.String, $core.String>(4, _omitFieldNames ? '' : 'targetingParameters', entryClassName: 'LiveSession.GamSettings.TargetingParametersEntry', keyFieldType: $pb.PbFieldType.OS, valueFieldType: $pb.PbFieldType.OS, packageName: const $pb.PackageName('google.cloud.video.stitcher.v1'))
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  LiveSession_GamSettings clone() => LiveSession_GamSettings()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  LiveSession_GamSettings copyWith(void Function(LiveSession_GamSettings) updates) => super.copyWith((message) => updates(message as LiveSession_GamSettings)) as LiveSession_GamSettings;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static LiveSession_GamSettings create() => LiveSession_GamSettings._();
  LiveSession_GamSettings createEmptyInstance() => create();
  static $pb.PbList<LiveSession_GamSettings> createRepeated() => $pb.PbList<LiveSession_GamSettings>();
  @$core.pragma('dart2js:noInline')
  static LiveSession_GamSettings getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<LiveSession_GamSettings>(create);
  static LiveSession_GamSettings? _defaultInstance;

  /// Required. The stream ID generated by Ad Manager. This must be set if GAM
  /// is being used for ads and the session uses client-side ad tracking.
  @$pb.TagNumber(1)
  $core.String get streamId => $_getSZ(0);
  @$pb.TagNumber(1)
  set streamId($core.String v) { $_setString(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasStreamId() => $_has(0);
  @$pb.TagNumber(1)
  void clearStreamId() => clearField(1);

  /// [Targeting
  /// parameters](https://support.google.com/admanager/answer/7320899) to send
  /// to Ad Manager to generate a stream ID. This should only be set if the
  /// session uses server-side ad tracking.
  @$pb.TagNumber(4)
  $core.Map<$core.String, $core.String> get targetingParameters => $_getMap(1);
}

/// Metadata for a live session. The session expires 5 minutes after the client
/// stops fetching the session's playlists.
class LiveSession extends $pb.GeneratedMessage {
  factory LiveSession({
    $core.String? name,
    $core.String? playUri,
    $core.Map<$core.String, $core.String>? adTagMacros,
    ManifestOptions? manifestOptions,
    LiveSession_GamSettings? gamSettings,
    $core.String? liveConfig,
    $1471.AdTracking? adTracking,
  }) {
    final $result = create();
    if (name != null) {
      $result.name = name;
    }
    if (playUri != null) {
      $result.playUri = playUri;
    }
    if (adTagMacros != null) {
      $result.adTagMacros.addAll(adTagMacros);
    }
    if (manifestOptions != null) {
      $result.manifestOptions = manifestOptions;
    }
    if (gamSettings != null) {
      $result.gamSettings = gamSettings;
    }
    if (liveConfig != null) {
      $result.liveConfig = liveConfig;
    }
    if (adTracking != null) {
      $result.adTracking = adTracking;
    }
    return $result;
  }
  LiveSession._() : super();
  factory LiveSession.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory LiveSession.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'LiveSession', package: const $pb.PackageName(_omitMessageNames ? '' : 'google.cloud.video.stitcher.v1'), createEmptyInstance: create)
    ..aOS(1, _omitFieldNames ? '' : 'name')
    ..aOS(2, _omitFieldNames ? '' : 'playUri')
    ..m<$core.String, $core.String>(6, _omitFieldNames ? '' : 'adTagMacros', entryClassName: 'LiveSession.AdTagMacrosEntry', keyFieldType: $pb.PbFieldType.OS, valueFieldType: $pb.PbFieldType.OS, packageName: const $pb.PackageName('google.cloud.video.stitcher.v1'))
    ..aOM<ManifestOptions>(10, _omitFieldNames ? '' : 'manifestOptions', subBuilder: ManifestOptions.create)
    ..aOM<LiveSession_GamSettings>(15, _omitFieldNames ? '' : 'gamSettings', subBuilder: LiveSession_GamSettings.create)
    ..aOS(16, _omitFieldNames ? '' : 'liveConfig')
    ..e<$1471.AdTracking>(17, _omitFieldNames ? '' : 'adTracking', $pb.PbFieldType.OE, defaultOrMaker: $1471.AdTracking.AD_TRACKING_UNSPECIFIED, valueOf: $1471.AdTracking.valueOf, enumValues: $1471.AdTracking.values)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  LiveSession clone() => LiveSession()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  LiveSession copyWith(void Function(LiveSession) updates) => super.copyWith((message) => updates(message as LiveSession)) as LiveSession;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static LiveSession create() => LiveSession._();
  LiveSession createEmptyInstance() => create();
  static $pb.PbList<LiveSession> createRepeated() => $pb.PbList<LiveSession>();
  @$core.pragma('dart2js:noInline')
  static LiveSession getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<LiveSession>(create);
  static LiveSession? _defaultInstance;

  /// Output only. The name of the live session, in the form of
  /// `projects/{project}/locations/{location}/liveSessions/{id}`.
  @$pb.TagNumber(1)
  $core.String get name => $_getSZ(0);
  @$pb.TagNumber(1)
  set name($core.String v) { $_setString(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasName() => $_has(0);
  @$pb.TagNumber(1)
  void clearName() => clearField(1);

  /// Output only. The URI to play the live session's ad-stitched stream.
  @$pb.TagNumber(2)
  $core.String get playUri => $_getSZ(1);
  @$pb.TagNumber(2)
  set playUri($core.String v) { $_setString(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasPlayUri() => $_has(1);
  @$pb.TagNumber(2)
  void clearPlayUri() => clearField(2);

  ///  Key value pairs for ad tag macro replacement, only available for live
  ///  sessions that do not implement Google Ad manager ad insertion. If the
  ///  specified ad tag URI has macros, this field provides the mapping to the
  ///  value that will replace the macro in the ad tag URI.
  ///
  ///  Macros are designated by square brackets, for example:
  ///
  ///    Ad tag URI: "https://doubleclick.google.com/ad/1?geo_id=[geoId]"
  ///
  ///    Ad tag macros: `{"geoId": "123"}`
  ///
  ///    Fully qualified ad tag:
  ///    `"https://doubleclick.google.com/ad/1?geo_id=123"`
  @$pb.TagNumber(6)
  $core.Map<$core.String, $core.String> get adTagMacros => $_getMap(2);

  /// Additional options that affect the output of the manifest.
  @$pb.TagNumber(10)
  ManifestOptions get manifestOptions => $_getN(3);
  @$pb.TagNumber(10)
  set manifestOptions(ManifestOptions v) { setField(10, v); }
  @$pb.TagNumber(10)
  $core.bool hasManifestOptions() => $_has(3);
  @$pb.TagNumber(10)
  void clearManifestOptions() => clearField(10);
  @$pb.TagNumber(10)
  ManifestOptions ensureManifestOptions() => $_ensure(3);

  /// This field should be set with appropriate values if GAM is being used for
  /// ads.
  @$pb.TagNumber(15)
  LiveSession_GamSettings get gamSettings => $_getN(4);
  @$pb.TagNumber(15)
  set gamSettings(LiveSession_GamSettings v) { setField(15, v); }
  @$pb.TagNumber(15)
  $core.bool hasGamSettings() => $_has(4);
  @$pb.TagNumber(15)
  void clearGamSettings() => clearField(15);
  @$pb.TagNumber(15)
  LiveSession_GamSettings ensureGamSettings() => $_ensure(4);

  /// Required. The resource name of the live config for this session, in the
  /// form of `projects/{project}/locations/{location}/liveConfigs/{id}`.
  @$pb.TagNumber(16)
  $core.String get liveConfig => $_getSZ(5);
  @$pb.TagNumber(16)
  set liveConfig($core.String v) { $_setString(5, v); }
  @$pb.TagNumber(16)
  $core.bool hasLiveConfig() => $_has(5);
  @$pb.TagNumber(16)
  void clearLiveConfig() => clearField(16);

  /// Determines how the ad should be tracked. This overrides the value set in
  /// the live config for this session.
  @$pb.TagNumber(17)
  $1471.AdTracking get adTracking => $_getN(6);
  @$pb.TagNumber(17)
  set adTracking($1471.AdTracking v) { setField(17, v); }
  @$pb.TagNumber(17)
  $core.bool hasAdTracking() => $_has(6);
  @$pb.TagNumber(17)
  void clearAdTracking() => clearField(17);
}

/// Options for manifest generation.
class ManifestOptions extends $pb.GeneratedMessage {
  factory ManifestOptions({
    $core.Iterable<RenditionFilter>? includeRenditions,
    ManifestOptions_OrderPolicy? bitrateOrder,
  }) {
    final $result = create();
    if (includeRenditions != null) {
      $result.includeRenditions.addAll(includeRenditions);
    }
    if (bitrateOrder != null) {
      $result.bitrateOrder = bitrateOrder;
    }
    return $result;
  }
  ManifestOptions._() : super();
  factory ManifestOptions.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory ManifestOptions.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'ManifestOptions', package: const $pb.PackageName(_omitMessageNames ? '' : 'google.cloud.video.stitcher.v1'), createEmptyInstance: create)
    ..pc<RenditionFilter>(1, _omitFieldNames ? '' : 'includeRenditions', $pb.PbFieldType.PM, subBuilder: RenditionFilter.create)
    ..e<ManifestOptions_OrderPolicy>(2, _omitFieldNames ? '' : 'bitrateOrder', $pb.PbFieldType.OE, defaultOrMaker: ManifestOptions_OrderPolicy.ORDER_POLICY_UNSPECIFIED, valueOf: ManifestOptions_OrderPolicy.valueOf, enumValues: ManifestOptions_OrderPolicy.values)
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  ManifestOptions clone() => ManifestOptions()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  ManifestOptions copyWith(void Function(ManifestOptions) updates) => super.copyWith((message) => updates(message as ManifestOptions)) as ManifestOptions;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static ManifestOptions create() => ManifestOptions._();
  ManifestOptions createEmptyInstance() => create();
  static $pb.PbList<ManifestOptions> createRepeated() => $pb.PbList<ManifestOptions>();
  @$core.pragma('dart2js:noInline')
  static ManifestOptions getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<ManifestOptions>(create);
  static ManifestOptions? _defaultInstance;

  /// If specified, the output manifest will only return renditions matching the
  /// specified filters.
  @$pb.TagNumber(1)
  $core.List<RenditionFilter> get includeRenditions => $_getList(0);

  /// If specified, the output manifest will orders the video and muxed
  /// renditions by bitrate according to the ordering policy.
  @$pb.TagNumber(2)
  ManifestOptions_OrderPolicy get bitrateOrder => $_getN(1);
  @$pb.TagNumber(2)
  set bitrateOrder(ManifestOptions_OrderPolicy v) { setField(2, v); }
  @$pb.TagNumber(2)
  $core.bool hasBitrateOrder() => $_has(1);
  @$pb.TagNumber(2)
  void clearBitrateOrder() => clearField(2);
}

/// Filters for a video or muxed redition.
class RenditionFilter extends $pb.GeneratedMessage {
  factory RenditionFilter({
    $core.int? bitrateBps,
    $core.String? codecs,
  }) {
    final $result = create();
    if (bitrateBps != null) {
      $result.bitrateBps = bitrateBps;
    }
    if (codecs != null) {
      $result.codecs = codecs;
    }
    return $result;
  }
  RenditionFilter._() : super();
  factory RenditionFilter.fromBuffer($core.List<$core.int> i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromBuffer(i, r);
  factory RenditionFilter.fromJson($core.String i, [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY]) => create()..mergeFromJson(i, r);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(_omitMessageNames ? '' : 'RenditionFilter', package: const $pb.PackageName(_omitMessageNames ? '' : 'google.cloud.video.stitcher.v1'), createEmptyInstance: create)
    ..a<$core.int>(1, _omitFieldNames ? '' : 'bitrateBps', $pb.PbFieldType.O3)
    ..aOS(2, _omitFieldNames ? '' : 'codecs')
    ..hasRequiredFields = false
  ;

  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.deepCopy] instead. '
  'Will be removed in next major version')
  RenditionFilter clone() => RenditionFilter()..mergeFromMessage(this);
  @$core.Deprecated(
  'Using this can add significant overhead to your binary. '
  'Use [GeneratedMessageGenericExtensions.rebuild] instead. '
  'Will be removed in next major version')
  RenditionFilter copyWith(void Function(RenditionFilter) updates) => super.copyWith((message) => updates(message as RenditionFilter)) as RenditionFilter;

  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static RenditionFilter create() => RenditionFilter._();
  RenditionFilter createEmptyInstance() => create();
  static $pb.PbList<RenditionFilter> createRepeated() => $pb.PbList<RenditionFilter>();
  @$core.pragma('dart2js:noInline')
  static RenditionFilter getDefault() => _defaultInstance ??= $pb.GeneratedMessage.$_defaultFor<RenditionFilter>(create);
  static RenditionFilter? _defaultInstance;

  /// Bitrate in bits per second for the rendition. If set, only renditions with
  /// the exact bitrate will match.
  @$pb.TagNumber(1)
  $core.int get bitrateBps => $_getIZ(0);
  @$pb.TagNumber(1)
  set bitrateBps($core.int v) { $_setSignedInt32(0, v); }
  @$pb.TagNumber(1)
  $core.bool hasBitrateBps() => $_has(0);
  @$pb.TagNumber(1)
  void clearBitrateBps() => clearField(1);

  /// Codecs for the rendition. If set, only renditions with the exact value
  /// will match.
  @$pb.TagNumber(2)
  $core.String get codecs => $_getSZ(1);
  @$pb.TagNumber(2)
  set codecs($core.String v) { $_setString(1, v); }
  @$pb.TagNumber(2)
  $core.bool hasCodecs() => $_has(1);
  @$pb.TagNumber(2)
  void clearCodecs() => clearField(2);
}


const _omitFieldNames = $core.bool.fromEnvironment('protobuf.omit_field_names');
const _omitMessageNames = $core.bool.fromEnvironment('protobuf.omit_message_names');
