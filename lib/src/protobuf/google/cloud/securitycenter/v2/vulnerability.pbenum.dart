//
//  Generated code. Do not modify.
//  source: google/cloud/securitycenter/v2/vulnerability.proto
//
// @dart = 2.12

// ignore_for_file: annotate_overrides, camel_case_types, comment_references
// ignore_for_file: constant_identifier_names, library_prefixes
// ignore_for_file: non_constant_identifier_names, prefer_final_fields
// ignore_for_file: unnecessary_import, unnecessary_this, unused_import

import 'dart:core' as $core;

import 'package:protobuf/protobuf.dart' as $pb;

/// The possible values of impact of the vulnerability if it was to be
/// exploited.
class Cve_RiskRating extends $pb.ProtobufEnum {
  static const Cve_RiskRating RISK_RATING_UNSPECIFIED = Cve_RiskRating._(0, _omitEnumNames ? '' : 'RISK_RATING_UNSPECIFIED');
  static const Cve_RiskRating LOW = Cve_RiskRating._(1, _omitEnumNames ? '' : 'LOW');
  static const Cve_RiskRating MEDIUM = Cve_RiskRating._(2, _omitEnumNames ? '' : 'MEDIUM');
  static const Cve_RiskRating HIGH = Cve_RiskRating._(3, _omitEnumNames ? '' : 'HIGH');
  static const Cve_RiskRating CRITICAL = Cve_RiskRating._(4, _omitEnumNames ? '' : 'CRITICAL');

  static const $core.List<Cve_RiskRating> values = <Cve_RiskRating> [
    RISK_RATING_UNSPECIFIED,
    LOW,
    MEDIUM,
    HIGH,
    CRITICAL,
  ];

  static final $core.Map<$core.int, Cve_RiskRating> _byValue = $pb.ProtobufEnum.initByValue(values);
  static Cve_RiskRating? valueOf($core.int value) => _byValue[value];

  const Cve_RiskRating._($core.int v, $core.String n) : super(v, n);
}

/// The possible values of exploitation activity of the vulnerability in the
/// wild.
class Cve_ExploitationActivity extends $pb.ProtobufEnum {
  static const Cve_ExploitationActivity EXPLOITATION_ACTIVITY_UNSPECIFIED = Cve_ExploitationActivity._(0, _omitEnumNames ? '' : 'EXPLOITATION_ACTIVITY_UNSPECIFIED');
  static const Cve_ExploitationActivity WIDE = Cve_ExploitationActivity._(1, _omitEnumNames ? '' : 'WIDE');
  static const Cve_ExploitationActivity CONFIRMED = Cve_ExploitationActivity._(2, _omitEnumNames ? '' : 'CONFIRMED');
  static const Cve_ExploitationActivity AVAILABLE = Cve_ExploitationActivity._(3, _omitEnumNames ? '' : 'AVAILABLE');
  static const Cve_ExploitationActivity ANTICIPATED = Cve_ExploitationActivity._(4, _omitEnumNames ? '' : 'ANTICIPATED');
  static const Cve_ExploitationActivity NO_KNOWN = Cve_ExploitationActivity._(5, _omitEnumNames ? '' : 'NO_KNOWN');

  static const $core.List<Cve_ExploitationActivity> values = <Cve_ExploitationActivity> [
    EXPLOITATION_ACTIVITY_UNSPECIFIED,
    WIDE,
    CONFIRMED,
    AVAILABLE,
    ANTICIPATED,
    NO_KNOWN,
  ];

  static final $core.Map<$core.int, Cve_ExploitationActivity> _byValue = $pb.ProtobufEnum.initByValue(values);
  static Cve_ExploitationActivity? valueOf($core.int value) => _byValue[value];

  const Cve_ExploitationActivity._($core.int v, $core.String n) : super(v, n);
}

/// This metric reflects the context by which vulnerability exploitation is
/// possible.
class Cvssv3_AttackVector extends $pb.ProtobufEnum {
  static const Cvssv3_AttackVector ATTACK_VECTOR_UNSPECIFIED = Cvssv3_AttackVector._(0, _omitEnumNames ? '' : 'ATTACK_VECTOR_UNSPECIFIED');
  static const Cvssv3_AttackVector ATTACK_VECTOR_NETWORK = Cvssv3_AttackVector._(1, _omitEnumNames ? '' : 'ATTACK_VECTOR_NETWORK');
  static const Cvssv3_AttackVector ATTACK_VECTOR_ADJACENT = Cvssv3_AttackVector._(2, _omitEnumNames ? '' : 'ATTACK_VECTOR_ADJACENT');
  static const Cvssv3_AttackVector ATTACK_VECTOR_LOCAL = Cvssv3_AttackVector._(3, _omitEnumNames ? '' : 'ATTACK_VECTOR_LOCAL');
  static const Cvssv3_AttackVector ATTACK_VECTOR_PHYSICAL = Cvssv3_AttackVector._(4, _omitEnumNames ? '' : 'ATTACK_VECTOR_PHYSICAL');

  static const $core.List<Cvssv3_AttackVector> values = <Cvssv3_AttackVector> [
    ATTACK_VECTOR_UNSPECIFIED,
    ATTACK_VECTOR_NETWORK,
    ATTACK_VECTOR_ADJACENT,
    ATTACK_VECTOR_LOCAL,
    ATTACK_VECTOR_PHYSICAL,
  ];

  static final $core.Map<$core.int, Cvssv3_AttackVector> _byValue = $pb.ProtobufEnum.initByValue(values);
  static Cvssv3_AttackVector? valueOf($core.int value) => _byValue[value];

  const Cvssv3_AttackVector._($core.int v, $core.String n) : super(v, n);
}

/// This metric describes the conditions beyond the attacker's control that
/// must exist in order to exploit the vulnerability.
class Cvssv3_AttackComplexity extends $pb.ProtobufEnum {
  static const Cvssv3_AttackComplexity ATTACK_COMPLEXITY_UNSPECIFIED = Cvssv3_AttackComplexity._(0, _omitEnumNames ? '' : 'ATTACK_COMPLEXITY_UNSPECIFIED');
  static const Cvssv3_AttackComplexity ATTACK_COMPLEXITY_LOW = Cvssv3_AttackComplexity._(1, _omitEnumNames ? '' : 'ATTACK_COMPLEXITY_LOW');
  static const Cvssv3_AttackComplexity ATTACK_COMPLEXITY_HIGH = Cvssv3_AttackComplexity._(2, _omitEnumNames ? '' : 'ATTACK_COMPLEXITY_HIGH');

  static const $core.List<Cvssv3_AttackComplexity> values = <Cvssv3_AttackComplexity> [
    ATTACK_COMPLEXITY_UNSPECIFIED,
    ATTACK_COMPLEXITY_LOW,
    ATTACK_COMPLEXITY_HIGH,
  ];

  static final $core.Map<$core.int, Cvssv3_AttackComplexity> _byValue = $pb.ProtobufEnum.initByValue(values);
  static Cvssv3_AttackComplexity? valueOf($core.int value) => _byValue[value];

  const Cvssv3_AttackComplexity._($core.int v, $core.String n) : super(v, n);
}

/// This metric describes the level of privileges an attacker must possess
/// before successfully exploiting the vulnerability.
class Cvssv3_PrivilegesRequired extends $pb.ProtobufEnum {
  static const Cvssv3_PrivilegesRequired PRIVILEGES_REQUIRED_UNSPECIFIED = Cvssv3_PrivilegesRequired._(0, _omitEnumNames ? '' : 'PRIVILEGES_REQUIRED_UNSPECIFIED');
  static const Cvssv3_PrivilegesRequired PRIVILEGES_REQUIRED_NONE = Cvssv3_PrivilegesRequired._(1, _omitEnumNames ? '' : 'PRIVILEGES_REQUIRED_NONE');
  static const Cvssv3_PrivilegesRequired PRIVILEGES_REQUIRED_LOW = Cvssv3_PrivilegesRequired._(2, _omitEnumNames ? '' : 'PRIVILEGES_REQUIRED_LOW');
  static const Cvssv3_PrivilegesRequired PRIVILEGES_REQUIRED_HIGH = Cvssv3_PrivilegesRequired._(3, _omitEnumNames ? '' : 'PRIVILEGES_REQUIRED_HIGH');

  static const $core.List<Cvssv3_PrivilegesRequired> values = <Cvssv3_PrivilegesRequired> [
    PRIVILEGES_REQUIRED_UNSPECIFIED,
    PRIVILEGES_REQUIRED_NONE,
    PRIVILEGES_REQUIRED_LOW,
    PRIVILEGES_REQUIRED_HIGH,
  ];

  static final $core.Map<$core.int, Cvssv3_PrivilegesRequired> _byValue = $pb.ProtobufEnum.initByValue(values);
  static Cvssv3_PrivilegesRequired? valueOf($core.int value) => _byValue[value];

  const Cvssv3_PrivilegesRequired._($core.int v, $core.String n) : super(v, n);
}

/// This metric captures the requirement for a human user, other than the
/// attacker, to participate in the successful compromise of the vulnerable
/// component.
class Cvssv3_UserInteraction extends $pb.ProtobufEnum {
  static const Cvssv3_UserInteraction USER_INTERACTION_UNSPECIFIED = Cvssv3_UserInteraction._(0, _omitEnumNames ? '' : 'USER_INTERACTION_UNSPECIFIED');
  static const Cvssv3_UserInteraction USER_INTERACTION_NONE = Cvssv3_UserInteraction._(1, _omitEnumNames ? '' : 'USER_INTERACTION_NONE');
  static const Cvssv3_UserInteraction USER_INTERACTION_REQUIRED = Cvssv3_UserInteraction._(2, _omitEnumNames ? '' : 'USER_INTERACTION_REQUIRED');

  static const $core.List<Cvssv3_UserInteraction> values = <Cvssv3_UserInteraction> [
    USER_INTERACTION_UNSPECIFIED,
    USER_INTERACTION_NONE,
    USER_INTERACTION_REQUIRED,
  ];

  static final $core.Map<$core.int, Cvssv3_UserInteraction> _byValue = $pb.ProtobufEnum.initByValue(values);
  static Cvssv3_UserInteraction? valueOf($core.int value) => _byValue[value];

  const Cvssv3_UserInteraction._($core.int v, $core.String n) : super(v, n);
}

/// The Scope metric captures whether a vulnerability in one vulnerable
/// component impacts resources in components beyond its security scope.
class Cvssv3_Scope extends $pb.ProtobufEnum {
  static const Cvssv3_Scope SCOPE_UNSPECIFIED = Cvssv3_Scope._(0, _omitEnumNames ? '' : 'SCOPE_UNSPECIFIED');
  static const Cvssv3_Scope SCOPE_UNCHANGED = Cvssv3_Scope._(1, _omitEnumNames ? '' : 'SCOPE_UNCHANGED');
  static const Cvssv3_Scope SCOPE_CHANGED = Cvssv3_Scope._(2, _omitEnumNames ? '' : 'SCOPE_CHANGED');

  static const $core.List<Cvssv3_Scope> values = <Cvssv3_Scope> [
    SCOPE_UNSPECIFIED,
    SCOPE_UNCHANGED,
    SCOPE_CHANGED,
  ];

  static final $core.Map<$core.int, Cvssv3_Scope> _byValue = $pb.ProtobufEnum.initByValue(values);
  static Cvssv3_Scope? valueOf($core.int value) => _byValue[value];

  const Cvssv3_Scope._($core.int v, $core.String n) : super(v, n);
}

/// The Impact metrics capture the effects of a successfully exploited
/// vulnerability on the component that suffers the worst outcome that is most
/// directly and predictably associated with the attack.
class Cvssv3_Impact extends $pb.ProtobufEnum {
  static const Cvssv3_Impact IMPACT_UNSPECIFIED = Cvssv3_Impact._(0, _omitEnumNames ? '' : 'IMPACT_UNSPECIFIED');
  static const Cvssv3_Impact IMPACT_HIGH = Cvssv3_Impact._(1, _omitEnumNames ? '' : 'IMPACT_HIGH');
  static const Cvssv3_Impact IMPACT_LOW = Cvssv3_Impact._(2, _omitEnumNames ? '' : 'IMPACT_LOW');
  static const Cvssv3_Impact IMPACT_NONE = Cvssv3_Impact._(3, _omitEnumNames ? '' : 'IMPACT_NONE');

  static const $core.List<Cvssv3_Impact> values = <Cvssv3_Impact> [
    IMPACT_UNSPECIFIED,
    IMPACT_HIGH,
    IMPACT_LOW,
    IMPACT_NONE,
  ];

  static final $core.Map<$core.int, Cvssv3_Impact> _byValue = $pb.ProtobufEnum.initByValue(values);
  static Cvssv3_Impact? valueOf($core.int value) => _byValue[value];

  const Cvssv3_Impact._($core.int v, $core.String n) : super(v, n);
}


const _omitEnumNames = $core.bool.fromEnvironment('protobuf.omit_enum_names');
